var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.373,1,0.848]],["body/components/AppComponent.html",[0,0.631,1,1.434,2,1.411,3,0.256,4,0.218,5,1.095,6,1.095,7,1.095,8,1.095,9,0.218,10,2.33,11,0.383,12,3.946,13,1.254,14,1.936,15,2.33,16,1.095,17,2.312,18,2.117,19,2.253,20,1.541,21,4.567,22,1.541,23,3.946,24,0.218,25,0.903,26,2.91,27,4.567,28,0.822,29,4.505,30,1.936,31,4.957,32,0.584,33,2.33,34,3.453,35,1.586,36,1.023,37,3.946,38,0.703,39,0.035,40,0.624,41,0.418,42,0.529,43,2.803,44,3.281,45,2.035,46,1.274,47,2.035,48,2.842,49,1.254,50,0.951,51,1.495,52,2.803,53,2.803,54,4.957,55,4.957,56,2.83,57,4.957,58,3.281,59,3.946,60,3.946,61,4.957,62,3.946,63,3.946,64,2.803,65,3.281,66,2.035,67,2.253,68,1.601,69,1.313,70,1.849,71,3.281,72,3.946,73,1.783,74,1.023,75,0.478,76,2.803,77,1.313,78,1.313,79,1.198,80,0.769,81,0.703,82,1.446,83,1.313,84,0.745,85,0.256,86,0.769,87,1.002,88,2.803,89,2.33,90,1.601,91,1.411,92,2.019,93,2.33,94,3.946,95,3.281,96,1.146,97,1.083,98,1.495,99,3.946,100,3.946,101,0.918,102,1.541,103,1.541,104,1.095,105,1.936,106,1.095,107,1.095,108,0.769,109,1.002,110,1.541,111,0.769,112,1.095,113,0.769,114,0.918,115,0.769,116,1.095,117,0.769,118,1.541,119,1.095,120,0.769,121,0.769,122,1.095,123,1.095,124,0.015,125,0.021,126,0.015]],["title/modules/AppModule.html",[127,2.225,128,1.968]],["body/modules/AppModule.html",[0,0.642,1,1.654,3,0.269,4,0.228,9,0.228,39,0.035,45,1.514,49,1.548,74,1.175,75,0.5,77,1.376,84,0.769,85,0.269,96,0.737,98,0.961,101,0.961,108,1.509,111,1.509,113,1.509,115,1.548,117,1.548,120,1.548,121,1.548,124,0.016,125,0.022,126,0.016,127,2.935,128,4.032,129,2.114,130,1.871,131,3.892,132,3.372,133,3.388,134,2.441,135,2.441,136,2.441,137,2.441,138,3.388,139,2.441,140,2.936,141,4.076,142,4.076,143,2.441,144,2.114,145,2.936,146,1.871,147,3.372,148,4.076,149,4.076,150,1.676,151,4.076,152,1.376,153,2.936,154,2.441,155,2.936,156,2.597,157,2.936,158,2.597,159,2.936,160,3.386,161,2.936,162,2.936,163,2.936,164,2.114,165,2.936,166,2.936,167,2.936,168,2.936,169,2.936,170,2.114,171,4.076,172,2.936,173,2.114,174,2.936,175,2.114,176,2.936,177,1.871,178,5.499,179,4.205,180,2.441,181,2.936,182,1.676,183,2.936,184,2.936,185,2.936,186,2.936,187,2.936]],["title/components/AssignedToMeComponent.html",[0,0.373,108,0.848]],["body/components/AssignedToMeComponent.html",[0,0.604,1,0.686,2,1.299,3,0.229,4,0.194,5,0.976,6,0.976,7,0.976,8,0.976,9,0.194,11,0.496,13,0.998,14,1.673,16,0.976,17,2.26,18,2.068,20,1.419,22,1.419,24,0.194,25,0.832,28,0.757,30,1.837,32,0.52,35,1.477,36,1.016,38,0.912,39,0.035,40,0.753,41,0.498,42,0.686,46,1.076,47,2.426,49,0.686,50,1.041,51,1.403,56,2.075,66,1.875,67,2.075,73,0.976,74,1.016,75,0.426,78,1.171,79,1.068,80,1.176,81,0.627,84,0.472,85,0.229,86,0.686,87,0.893,91,1.299,96,0.627,97,1.176,98,0.818,101,0.818,102,1.419,103,1.419,104,0.976,105,1.837,106,0.976,107,0.976,108,1.291,109,2.128,110,1.419,111,0.686,112,0.976,113,0.686,114,0.818,115,0.686,116,0.976,117,0.686,118,1.419,119,0.976,120,0.686,121,0.686,122,0.976,123,0.976,124,0.013,125,0.02,126,0.013,170,3.971,188,4.584,189,1.8,190,3.021,191,2.985,192,3.561,193,3.021,194,3.073,195,3.387,196,3.387,197,2.618,198,1.8,199,2.23,200,3.634,201,2.499,202,2.977,203,2.499,204,3.021,205,1.54,206,2.499,207,1.875,208,2.144,209,1.291,210,1.673,211,2.075,212,1.176,213,2.499,214,2.499,215,2.316,216,2.618,217,2.618,218,2.316,219,2.075,220,3.021,221,2.618,222,2.316,223,2.618,224,1.8,225,1.8,226,1.8,227,2.077,228,1.8,229,1.8,230,1.068,231,1.427,232,1.8,233,2.499,234,1.8,235,1.8,236,2.618,237,1.171,238,1.8,239,1.8,240,0.686,241,1.8,242,1.875,243,2.075,244,2.618,245,2.618,246,3.021]],["title/guards/AuthGuard.html",[160,1.968,247,1.968]],["body/guards/AuthGuard.html",[3,0.329,4,0.28,9,0.28,11,0.492,13,0.989,19,2.057,24,0.28,26,2.295,28,0.974,32,0.75,33,2.994,34,3.719,35,1.631,36,0.883,38,1.173,39,0.035,40,0.639,41,0.495,42,0.883,45,2.412,48,3.368,50,0.75,58,3.887,67,2.057,69,2.191,70,1.688,71,3.887,74,0.98,75,0.614,77,1.688,83,1.688,84,0.68,85,0.329,86,0.989,87,1.288,93,2.994,124,0.019,125,0.025,126,0.019,146,2.98,160,2.98,177,2.295,179,4.568,182,2.67,237,2.191,240,1.283,247,2.98,248,3.602,249,2.994,250,3.368,251,4.676,252,4.568,253,4.676,254,4.676,255,3.602,256,4.676,257,5.695,258,5.495,259,5.695,260,3.602,261,4.676,262,5.495,263,4.676,264,3.138,265,3.887,266,4.676,267,2.98,268,1.531,269,2.295,270,2.994,271,2.994,272,3.602,273,1.539,274,3.602,275,2.994,276,3.602]],["title/injectables/AuthService.html",[35,0.848,268,1.011]],["body/injectables/AuthService.html",[3,0.269,4,0.228,9,0.228,11,0.401,19,1.679,24,0.228,25,0.934,26,2.986,28,0.85,29,4.207,32,0.612,35,1.12,36,1.039,38,1.024,39,0.035,40,0.557,41,0.536,42,0.77,44,3.392,45,2.104,46,1.413,50,0.976,51,0.963,65,3.392,66,2.61,67,3.141,74,1.039,75,0.501,80,1.459,81,0.738,82,1.517,84,0.555,85,0.269,86,0.807,87,1.9,89,2.444,96,0.738,124,0.016,125,0.022,126,0.016,152,1.378,182,2.329,207,2.104,212,1.579,237,1.912,240,1.286,250,2.938,267,2.6,268,1.336,269,1.873,277,1.873,278,2.444,279,2.6,280,3.392,281,4.08,282,4.08,283,4.08,284,2.938,285,4.685,286,2.6,287,4.685,288,2.117,289,3.645,290,4.08,291,4.08,292,3.392,293,5.752,294,4.08,295,5.502,296,5.502,297,2.329,298,4.08,299,3.225,300,2.94,301,4.08,302,2.938,303,3.392,304,3.392,305,2.6,306,2.938,307,4.08,308,2.195,309,2.94,310,4.08,311,4.685,312,2.94,313,4.08,314,2.94,315,2.94,316,2.117,317,1.517,318,1.679,319,2.444,320,2.94,321,2.94,322,2.94,323,2.94,324,2.444,325,2.94,326,2.94,327,2.94,328,2.94,329,2.94,330,2.94,331,2.94,332,2.94,333,2.94]],["title/interfaces/Category.html",[334,0.848,335,1.447]],["body/interfaces/Category.html",[3,0.425,4,0.361,9,0.361,11,0.635,24,0.361,25,1.253,39,0.033,40,0.821,41,0.579,85,0.425,124,0.025,125,0.029,126,0.025,205,1.906,209,1.65,212,1.598,334,1.503,335,2.728,336,2.178,337,3.864]],["title/components/ClosedIssuesComponent.html",[0,0.373,111,0.848]],["body/components/ClosedIssuesComponent.html",[0,0.597,1,0.666,2,1.272,3,0.222,4,0.189,5,0.948,6,0.948,7,0.948,8,0.948,9,0.189,11,0.486,13,0.977,14,1.645,16,0.948,17,2.246,18,2.056,20,1.39,22,1.39,24,0.189,25,0.814,28,0.741,30,1.812,32,0.506,35,1.464,36,1.007,38,0.893,39,0.035,40,0.634,41,0.491,42,0.672,46,1.366,47,2.393,49,0.666,50,1.029,51,1.379,56,2.032,73,2.314,74,1.033,75,0.414,78,1.138,79,1.037,80,1.156,81,0.609,84,0.458,85,0.222,86,0.666,87,1.272,90,2.032,91,1.272,96,0.609,97,0.666,98,0.795,101,0.795,102,1.39,103,1.39,104,0.948,105,1.812,106,0.948,107,0.948,108,0.666,109,1.766,110,1.39,111,1.273,112,0.948,113,0.666,114,1.617,115,0.666,116,0.948,117,0.666,118,1.39,119,0.948,120,0.666,121,0.666,122,0.948,123,0.948,124,0.013,125,0.019,126,0.013,175,3.94,190,2.958,191,3.079,195,3.341,198,1.748,199,2.136,202,2.947,205,1.519,207,1.836,209,1.273,210,0.948,211,2.032,212,1.156,215,2.268,216,2.563,217,2.563,218,2.268,219,2.032,221,2.563,222,2.268,223,2.563,224,1.748,225,1.748,226,1.748,228,1.748,230,2.205,231,1.386,232,1.748,237,1.138,240,0.666,242,1.836,243,2.032,244,2.563,245,2.563,308,2.174,338,4.547,339,2.018,340,2.958,341,4.213,342,3.559,343,2.499,344,2.563,345,2.956,346,2.615,347,3.559,348,2.428,349,2.958,350,2.428,351,2.428,352,2.428,353,2.428,354,2.018,355,2.018,356,1.547,357,3.559,358,2.428,359,2.428,360,1.547,361,1.547,362,1.748,363,1.748,364,1.386,365,2.958,366,2.958]],["title/components/CreatedByMeComponent.html",[0,0.373,113,0.848]],["body/components/CreatedByMeComponent.html",[0,0.564,1,0.584,2,1.153,3,0.195,4,0.165,5,0.831,6,0.831,7,0.831,8,0.831,9,0.165,11,0.532,13,0.885,14,1.521,16,0.831,17,2.18,18,1.995,20,1.26,22,1.26,24,0.165,25,0.738,28,0.672,30,1.697,32,0.443,35,1.402,36,1.037,38,0.977,39,0.035,40,0.736,41,0.52,42,0.735,46,1.335,47,2.536,49,0.584,50,1.095,51,1.423,56,1.842,66,1.664,67,1.842,73,0.831,74,1.017,75,0.363,78,0.997,79,0.909,80,1.069,81,0.534,84,0.402,85,0.195,86,0.584,87,1.153,90,1.842,91,1.392,96,0.534,97,1.069,98,0.697,101,0.697,102,1.26,103,1.26,104,0.831,105,1.697,106,0.831,107,0.831,108,0.584,109,0.761,110,1.26,111,0.584,112,0.831,113,1.193,114,1.893,115,0.584,116,0.831,117,0.584,118,1.26,119,0.831,120,0.584,121,0.584,122,0.831,123,0.831,124,0.011,125,0.017,126,0.011,173,4.02,189,1.532,191,2.879,192,3.238,193,2.681,194,2.916,195,3.13,196,3.13,197,2.323,198,1.532,199,2.145,202,3.136,204,2.681,205,1.723,207,2.242,208,2.085,209,1.444,210,1.521,211,2.482,212,1.349,215,2.055,216,2.323,217,2.323,218,2.77,219,2.482,220,2.681,221,3.13,222,2.77,223,3.13,224,1.532,225,1.532,226,1.532,227,1.769,228,1.532,229,1.532,230,1.857,231,1.215,232,1.532,234,1.532,235,1.532,236,2.323,237,1.511,238,1.532,239,1.532,240,0.885,241,1.532,242,1.664,243,1.842,244,2.323,245,2.323,246,2.681,308,2.037,343,2.393,344,2.323,345,2.77,346,2.524,349,2.681,354,1.769,355,1.769,356,1.356,360,1.356,361,1.356,362,1.532,363,1.532,364,1.215,365,2.681,366,2.681,367,4.64,368,3.225,369,2.128,370,2.128,371,2.128,372,2.128,373,2.128,374,2.128,375,2.128,376,2.128,377,2.128]],["title/components/DashboardComponent.html",[0,0.373,115,0.848]],["body/components/DashboardComponent.html",[0,0.623,1,0.975,2,1.954,3,0.325,4,0.276,5,1.387,6,1.387,7,1.387,8,1.387,9,0.276,11,0.485,13,1.272,14,2.014,16,1.387,17,2.41,18,2.206,20,1.81,22,1.81,24,0.276,28,0.965,30,2.135,32,1.074,36,0.875,39,0.035,40,0.633,49,0.975,50,0.74,51,1.163,73,1.387,74,1.032,75,0.605,80,0.975,81,0.891,84,0.671,85,0.325,91,1.844,95,3.852,96,0.891,97,0.975,98,1.163,101,1.163,102,1.81,103,1.81,104,1.387,105,2.135,106,1.387,107,1.387,108,1.416,109,1.27,110,1.81,111,1.416,112,1.387,113,1.416,114,1.163,115,1.5,116,1.387,117,0.975,118,1.81,119,1.387,120,0.975,121,0.975,122,1.387,123,1.387,124,0.019,125,0.025,126,0.019,182,2.646,199,1.387,264,2.646,378,2.953,379,4.634,380,4.634,381,4.634,382,4.634,383,5.157,384,4.634,385,3.552,386,3.552,387,2.028,388,2.558]],["title/interceptors/ErrorInterceptor.html",[389,1.764,390,1.968]],["body/interceptors/ErrorInterceptor.html",[3,0.348,4,0.296,9,0.296,11,0.52,13,1.046,24,0.296,28,1.009,32,0.793,35,1.626,36,0.915,38,1.216,39,0.035,40,0.662,41,0.513,42,0.915,50,0.793,66,2.5,74,1.094,75,0.649,80,1.463,81,0.956,83,1.785,84,0.719,85,0.443,86,1.046,92,2.744,124,0.02,125,0.026,126,0.02,152,1.785,158,2.428,177,2.428,240,1.331,268,1.587,273,1.628,317,1.965,390,3.398,391,2.744,392,2.744,393,4.03,394,3.491,395,3.167,396,3.81,397,3.491,398,4.042,399,3.84,400,4.042,401,3.81,402,2.744,403,3.491,404,2.744,405,3.089,406,3.167,407,3.81,408,3.81,409,3.81,410,3.167,411,3.81,412,2.175,413,3.81,414,3.81,415,3.167,416,3.81,417,2.428,418,2.428,419,2.428]],["title/interceptors/FakeBackendInterceptor.html",[389,1.764,420,1.968]],["body/interceptors/FakeBackendInterceptor.html",[3,0.16,4,0.136,9,0.136,13,0.481,24,0.136,25,0.635,28,0.578,32,0.717,36,0.806,38,0.44,39,0.035,40,0.239,41,0.294,42,0.331,46,0.788,50,0.717,51,0.574,70,0.821,74,0.959,75,0.299,78,0.821,79,0.749,80,0.946,81,0.44,82,0.904,84,0.331,85,0.254,87,1.624,97,1.395,124,0.009,125,0.015,126,0.009,152,0.821,177,2.497,208,1.232,209,1.458,210,1.084,230,1.472,240,1.69,242,2.203,252,4.615,268,0.909,273,1.472,279,1.117,297,1.001,299,1.117,302,2.481,308,1.3,317,0.904,364,1.585,387,1.001,389,1.001,391,1.262,394,1.999,397,1.999,398,2.822,399,2.481,400,2.822,402,1.262,403,1.999,404,1.262,405,1.768,406,2.864,410,1.457,412,1.001,417,1.117,418,1.117,419,1.117,420,2.195,421,3.271,422,1.262,423,3.075,424,3.918,425,2.237,426,2.775,427,1.752,428,1.752,429,1.752,430,2.775,431,1.752,432,1.752,433,1.752,434,1.999,435,3.257,436,1.752,437,1.614,438,1.262,439,1.752,440,1.752,441,1.752,442,1.752,443,3.445,444,1.752,445,1.752,446,1.752,447,2.775,448,1.752,449,5.552,450,1.752,451,2.307,452,2.481,453,1.752,454,1.752,455,1.752,456,5.481,457,1.752,458,1.752,459,1.752,460,1.752,461,1.752,462,1.752,463,1.752,464,1.752,465,2.775,466,2.775,467,2.775,468,2.307,469,1.999,470,2.307,471,1.999,472,2.775,473,2.775,474,1.752,475,1.752,476,3.445,477,2.307,478,2.481,479,1.752,480,3.445,481,1.752,482,1.752,483,3.032,484,1.752,485,2.775,486,2.775,487,2.775,488,2.775,489,2.775,490,1.752,491,1.752,492,1.752,493,1.752,494,1.752,495,1.752,496,1.752,497,1.752,498,1.752,499,1.752,500,1.752,501,1.752,502,1.752,503,1.752,504,1.752,505,1.752,506,1.752,507,1.752,508,1.752,509,1.752,510,1.752,511,4.27,512,4.27,513,1.752,514,1.752,515,1.752,516,1.752,517,1.752,518,1.752,519,1.752,520,1.752,521,4.27,522,1.752,523,1.752,524,3.445,525,2.775,526,1.752,527,2.775,528,1.752,529,1.262,530,1.752,531,1.752,532,1.752,533,1.752,534,1.752,535,1.752,536,1.752,537,1.752,538,1.457,539,1.752,540,1.752,541,1.752,542,3.445,543,1.752,544,1.752,545,1.752,546,1.752,547,3.445,548,1.752,549,1.752,550,1.262,551,1.117,552,2.307,553,1.262,554,1.457,555,1.262]],["title/interfaces/Issue.html",[97,0.848,334,0.848]],["body/interfaces/Issue.html",[3,0.364,4,0.309,9,0.309,11,0.802,24,0.309,25,1.14,39,0.034,41,0.661,42,0.941,85,0.364,97,1.493,124,0.021,125,0.027,126,0.021,205,2.103,209,1.565,210,2.227,212,1.644,243,3.256,334,1.368,336,1.865,556,3.309,557,4.107,558,4.74,559,4.107,560,4.107,561,4.74,562,4.74,563,3.817]],["title/components/IssueComponent.html",[0,0.373,117,0.848]],["body/components/IssueComponent.html",[0,0.44,1,0.356,2,0.776,3,0.119,4,0.101,5,0.506,6,0.506,7,0.506,8,0.506,9,0.101,11,0.177,13,0.595,14,1.093,16,0.506,17,1.89,18,1.73,20,0.847,22,0.847,24,0.101,25,0.497,28,0.452,30,1.278,32,0.27,35,1.149,36,1.079,38,0.914,39,0.035,40,0.661,41,0.544,42,0.688,46,1.005,47,2.43,49,0.356,50,1.052,51,1.494,56,1.239,66,1.119,68,2.081,69,1.707,70,2.268,73,0.506,74,0.986,75,0.221,77,0.607,78,0.607,79,0.554,80,1,81,0.325,82,0.668,83,0.607,84,0.245,85,0.119,86,0.356,87,1.17,90,1.239,91,1.496,96,1.214,97,1.586,98,0.424,101,0.424,102,0.847,103,0.847,104,0.506,105,1.278,106,0.506,107,0.506,108,0.356,109,1.631,110,0.847,111,0.356,112,0.506,113,0.356,114,0.424,115,0.356,116,0.506,117,0.898,118,0.847,119,0.506,120,0.356,121,0.356,122,0.506,123,0.506,124,0.007,125,0.012,126,0.007,146,1.382,150,0.74,194,2.39,196,2.357,197,1.563,199,2.173,202,2.936,205,1.684,207,1.688,208,2.101,209,1.36,210,0.847,211,1.239,212,1.205,218,1.382,219,1.869,229,0.933,230,0.927,231,0.74,234,0.933,235,0.933,236,1.563,237,1.017,238,0.933,239,0.933,240,0.898,241,2.016,264,1.239,265,1.804,273,1.949,286,1.382,292,1.804,305,2.512,308,1.534,316,0.933,317,0.668,335,1.707,343,2.138,344,1.563,345,2.086,346,1.961,356,0.826,360,0.826,361,0.826,362,0.933,363,0.933,364,1.598,387,0.74,388,0.933,412,2.251,425,2.936,437,2.48,438,0.933,469,1.563,471,1.563,478,2.839,563,1.382,564,1.077,565,1.804,566,2.169,567,1.563,568,2.327,569,1.804,570,2.667,571,3.644,572,2.799,573,3.276,574,2.39,575,2.799,576,3.644,577,2.799,578,2.799,579,2.799,580,2.721,581,2.169,582,2.169,583,2.721,584,3.273,585,3.273,586,2.799,587,1.296,588,2.721,589,3.015,590,2.169,591,1.296,592,2.169,593,1.296,594,2.169,595,1.296,596,2.169,597,4.711,598,1.296,599,1.296,600,2.169,601,1.296,602,2.169,603,1.296,604,1.296,605,1.296,606,1.296,607,2.357,608,2.721,609,3.393,610,2.169,611,1.804,612,2.357,613,3.162,614,2.721,615,3.277,616,1.296,617,2.512,618,2.169,619,1.804,620,2.169,621,2.721,622,1.296,623,1.804,624,1.804,625,1.296,626,2.357,627,2.357,628,1.296,629,2.839,630,1.296,631,1.296,632,1.296,633,1.296,634,2.169,635,1.804,636,2.016,637,1.296,638,1.563,639,1.382,640,2.169,641,1.296,642,1.382,643,1.382,644,1.296,645,1.563,646,1.563,647,1.563,648,1.563,649,1.563,650,1.563,651,1.563,652,1.563,653,1.296,654,1.296,655,1.296,656,1.563,657,1.563,658,1.077,659,0.933,660,1.311,661,0.933,662,0.933,663,0.933,664,0.933,665,1.296,666,1.382,667,1.296,668,1.296,669,1.296,670,1.077,671,1.077,672,1.296,673,0.933,674,1.563,675,1.296,676,1.296,677,1.296,678,1.077,679,1.077,680,1.077,681,1.077,682,1.296,683,1.296,684,1.296,685,2.169,686,2.799,687,1.296,688,1.804,689,2.169,690,1.296,691,2.169,692,1.296,693,2.169,694,2.799,695,1.296,696,1.296,697,1.296,698,0.933,699,1.296,700,1.296,701,1.296,702,1.296,703,1.296,704,2.169,705,2.169,706,1.804,707,1.804,708,1.804,709,2.357,710,2.169,711,2.169,712,1.296,713,2.169,714,2.169,715,2.169,716,2.169,717,2.169,718,1.296]],["title/injectables/IssueService.html",[199,1.206,268,1.011]],["body/injectables/IssueService.html",[3,0.177,4,0.15,9,0.15,11,0.697,19,1.104,24,0.15,28,0.624,32,0.402,36,1.045,38,1.28,39,0.035,40,0.697,41,0.566,42,0.963,46,1.283,50,1.279,74,1.029,75,0.329,78,0.906,79,0.826,80,1.653,81,0.485,84,0.365,85,0.177,86,0.531,91,1.599,97,1.666,98,0.981,109,1.071,114,0.981,124,0.01,125,0.016,126,0.01,152,0.906,191,2.632,194,1.711,199,1.17,205,1.944,207,2.855,208,1.765,209,1.599,210,1.17,211,3.056,230,1.28,237,2.313,240,1.572,267,2.634,268,0.981,269,1.232,277,1.232,279,1.909,284,2.158,288,1.392,289,2.977,297,1.711,302,2.977,316,1.392,317,0.997,318,1.104,324,2.491,335,1.719,387,1.104,425,2.702,434,1.392,437,2.657,438,1.392,477,1.607,478,2.977,557,2.643,559,2.643,570,1.909,573,1.909,574,1.711,611,2.491,617,1.909,621,2.491,635,2.491,659,1.392,660,1.719,661,1.392,662,1.392,666,2.338,719,1.607,720,2.996,721,2.491,722,2.491,723,2.996,724,2.996,725,4.134,726,4.134,727,2.996,728,4.134,729,2.996,730,2.996,731,2.996,732,4.134,733,2.996,734,1.933,735,2.996,736,1.933,737,2.996,738,2.996,739,2.996,740,4.134,741,2.996,742,2.996,743,1.933,744,4.45,745,1.933,746,2.913,747,1.933,748,2.996,749,1.933,750,1.933,751,2.996,752,1.933,753,2.996,754,1.933,755,2.996,756,2.996,757,1.933,758,1.933,759,1.933,760,2.996,761,1.933,762,2.996,763,1.933,764,1.933,765,4.355,766,4.134,767,1.933,768,1.933,769,1.933,770,1.933,771,1.933,772,1.933,773,1.933,774,1.933,775,1.933,776,1.933,777,2.996,778,1.933,779,1.933]],["title/interceptors/JwtInterceptor.html",[389,1.764,780,1.968]],["body/interceptors/JwtInterceptor.html",[3,0.34,4,0.289,9,0.289,11,0.508,13,1.021,24,0.289,26,2.37,28,0.994,32,0.775,35,1.616,36,0.901,38,1.198,39,0.035,40,0.652,41,0.505,42,0.901,50,0.775,74,1.05,75,0.634,80,1.447,81,0.933,83,1.743,84,0.702,85,0.437,86,1.021,124,0.02,125,0.026,126,0.02,152,1.743,156,2.37,222,3.042,240,1.021,267,3.042,268,1.563,270,3.092,271,3.092,273,1.589,391,2.679,394,3.438,395,3.092,397,3.438,398,4.006,399,3.797,400,4.006,402,3.438,403,4.006,404,2.679,405,3.042,417,2.37,418,2.37,419,2.37,452,3.438,538,3.092,551,3.042,617,3.042,780,3.36,781,2.679,782,4.774,783,4.774,784,4.774,785,4.774,786,4.774,787,4.774,788,3.72,789,3.72,790,4.774,791,3.72,792,3.72,793,3.72,794,3.72]],["title/components/LoginComponent.html",[0,0.373,49,0.848]],["body/components/LoginComponent.html",[0,0.635,1,0.635,2,1.227,3,0.212,4,0.18,5,0.903,6,0.903,7,0.903,8,0.903,9,0.18,11,0.316,13,0.942,14,1.599,15,1.922,16,0.903,17,2.222,18,2.034,20,1.341,22,1.341,24,0.18,25,0.786,28,0.715,30,1.77,32,0.482,34,3.346,35,1.562,36,1.04,38,0.58,39,0.035,40,0.559,41,0.48,42,0.437,46,0.786,49,1.329,50,0.715,51,1.124,68,2.338,69,2.269,70,2.269,73,0.903,74,0.914,75,0.394,77,1.084,83,1.084,84,0.648,85,0.212,86,0.635,87,1.464,91,1.227,92,1.666,96,0.58,98,0.757,101,0.757,102,1.341,103,1.341,104,0.903,105,1.77,106,0.903,107,0.903,108,0.635,109,0.827,110,1.341,111,0.635,112,0.903,113,0.635,114,0.757,115,0.635,116,0.903,117,0.635,118,1.341,119,0.903,120,0.635,121,0.635,122,0.903,123,0.903,124,0.012,125,0.018,126,0.012,146,2.61,150,1.32,182,3.444,212,1.124,219,1.96,240,0.942,250,3.264,264,2.587,273,2.167,275,3.404,286,2.188,299,3.085,303,2.854,304,2.854,305,2.188,306,2.473,308,2.269,317,1.193,412,2.999,415,1.922,567,2.473,588,3.767,589,3.653,607,2.473,608,2.854,609,3.653,612,2.473,613,3.885,626,2.473,627,2.473,629,3.264,636,2.949,638,2.473,639,2.188,642,2.188,643,2.188,645,2.473,646,2.473,647,2.473,648,2.473,649,2.473,650,2.473,651,2.473,652,2.473,656,2.473,657,2.473,663,1.666,664,1.666,673,1.666,674,2.473,709,3.264,746,1.96,795,1.922,796,4.095,797,3.433,798,3.404,799,4.095,800,3.404,801,3.767,802,3.404,803,1.922,804,3.433,805,2.313,806,2.313,807,3.433,808,3.433,809,2.313,810,2.313,811,2.313,812,3.433,813,3.433,814,3.433,815,2.854,816,3.433,817,2.313,818,1.922,819,2.313,820,2.313,821,2.313,822,2.313,823,2.313,824,1.922,825,2.313,826,2.854,827,2.854,828,2.313,829,2.313,830,2.313,831,2.313]],["title/components/NewIssueComponent.html",[0,0.373,120,0.848]],["body/components/NewIssueComponent.html",[0,0.411,1,0.473,2,0.978,3,0.157,4,0.134,5,0.672,6,0.672,7,0.672,8,0.672,9,0.134,11,0.645,13,0.751,14,1.33,16,0.672,17,2.064,18,1.889,20,1.069,22,1.069,24,0.134,25,0.626,28,0.57,30,1.515,32,0.358,34,3.011,35,1.297,36,1.044,38,0.432,39,0.035,40,0.465,41,0.477,42,0.325,46,1.081,47,2.529,48,1.971,49,0.473,50,0.881,51,1.386,68,2.884,69,2.367,70,2.112,73,0.672,74,1.015,75,0.293,77,0.807,80,0.473,81,0.432,82,0.888,83,0.807,84,0.325,85,0.157,86,0.473,87,1.387,90,0.983,91,1.513,96,1.452,97,1.498,98,0.564,101,0.564,102,1.069,103,1.069,104,0.672,105,1.515,106,0.672,107,0.672,108,0.473,109,1.689,110,1.069,111,0.473,112,0.672,113,0.473,114,0.564,115,0.473,116,0.672,117,0.473,118,1.069,119,0.672,120,1.065,121,0.473,122,0.672,123,0.672,124,0.009,125,0.015,126,0.009,150,0.983,164,4.028,180,1.431,191,1.411,199,2.226,202,2.573,208,0.615,212,0.473,231,0.983,240,0.751,243,2.573,264,1.562,273,1.926,286,1.744,305,2.872,306,1.971,335,2.298,343,2.367,345,2.472,346,2.214,356,1.097,360,1.097,361,1.097,364,1.562,387,0.983,388,1.24,412,2.573,425,2.8,469,1.971,471,1.971,553,1.971,557,1.24,558,1.431,559,1.24,561,1.431,562,1.431,563,2.472,565,2.275,567,1.971,568,2.831,569,2.275,570,3.219,574,2.884,580,3.225,583,3.225,589,3.246,607,1.971,609,3.246,612,1.971,613,3.246,614,2.275,615,3.225,623,2.275,624,2.275,626,1.971,627,1.971,629,3.246,636,2.452,638,1.971,639,1.744,642,1.744,643,1.744,645,1.971,646,1.971,647,1.971,648,1.971,649,1.971,650,1.971,651,1.971,652,1.971,656,1.971,657,1.971,658,1.431,659,1.24,660,2.298,661,1.24,662,1.24,664,1.24,670,1.431,671,1.431,673,1.24,674,3.246,678,1.431,679,1.431,680,1.431,681,1.431,688,1.431,706,2.275,707,2.275,708,3.225,709,3.872,746,1.562,798,2.831,800,2.831,801,3.225,802,2.831,803,1.431,818,1.431,824,2.275,826,2.275,827,2.275,832,4.649,833,1.431,834,2.736,835,3.405,836,2.736,837,1.722,838,4.507,839,4.507,840,1.722,841,1.722,842,1.722,843,1.722,844,1.722,845,1.722,846,1.722,847,1.722,848,1.722,849,1.722,850,1.722,851,1.722,852,1.722,853,1.722,854,1.722,855,1.722,856,1.722,857,1.722,858,1.722,859,1.722,860,1.722,861,1.722,862,1.722,863,1.722,864,1.722,865,1.722,866,1.722,867,1.722,868,1.722,869,1.722,870,2.736]],["title/interfaces/Note.html",[334,0.848,437,1.447]],["body/interfaces/Note.html",[3,0.39,4,0.331,9,0.331,11,0.582,24,0.331,25,1.19,39,0.034,41,0.645,42,1.103,85,0.39,124,0.023,125,0.028,126,0.023,205,2.084,209,1.603,210,2.281,212,1.54,230,2.495,334,1.427,336,1.997,437,2.628,560,4.206,563,3.574,666,3.722,698,4.206,871,3.543]],["title/components/OptionsComponent.html",[0,0.373,121,0.848]],["body/components/OptionsComponent.html",[0,0.608,1,0.927,2,1.602,3,0.309,4,0.262,5,1.318,6,1.318,7,1.318,8,1.318,9,0.262,13,1.23,14,1.964,16,1.318,17,2.39,18,2.188,20,1.75,22,1.75,24,0.262,28,0.933,30,2.093,32,1.047,36,0.846,39,0.034,40,0.612,46,1.359,49,0.927,50,0.703,51,1.105,73,1.318,74,0.637,75,0.575,84,0.637,85,0.309,96,1.468,98,1.647,101,1.105,102,1.75,103,1.75,104,1.318,105,2.093,106,1.318,107,1.318,108,0.927,109,1.207,110,1.75,111,0.927,112,1.318,113,0.927,114,1.105,115,0.927,116,1.318,117,0.927,118,1.75,119,1.318,120,0.927,121,1.471,122,1.318,123,1.318,124,0.018,125,0.024,126,0.018,208,1.602,335,2.511,425,3.392,483,3.415,529,3.859,617,3.653,660,2.783,872,2.807,873,5.03,874,4.481,875,3.376,876,3.376,877,5.359,878,4.481,879,5.94,880,4.455,881,3.726,882,4.481]],["title/interfaces/Priority.html",[334,0.848,660,1.447]],["body/interfaces/Priority.html",[3,0.4,4,0.34,9,0.34,11,0.597,24,0.34,25,1.208,36,0.997,39,0.034,40,0.804,41,0.623,69,2.473,85,0.4,124,0.023,125,0.028,126,0.023,205,2.03,209,1.617,212,1.557,334,1.449,336,2.048,434,4.242,574,3.014,660,2.657,883,3.633,884,5.279,885,5.279,886,5.279]],["title/interfaces/Status.html",[208,1.104,334,0.848]],["body/interfaces/Status.html",[3,0.425,4,0.361,9,0.361,11,0.635,24,0.361,25,1.253,39,0.033,40,0.821,41,0.579,85,0.425,124,0.025,125,0.029,126,0.025,205,1.906,208,2.081,209,1.65,212,1.598,334,1.503,336,2.178,887,3.864]],["title/interfaces/User.html",[46,0.707,334,0.848]],["body/interfaces/User.html",[3,0.379,4,0.322,9,0.322,11,0.565,24,0.322,25,1.169,39,0.034,41,0.64,42,1.092,46,1.268,85,0.379,124,0.022,125,0.027,126,0.022,205,1.813,209,1.587,212,1.757,299,3.685,308,2.709,334,1.137,336,1.94,343,2.393,393,4.246,451,4.246,452,4.356,468,4.807,470,4.807,888,3.442,889,4.141,890,5.107]],["title/injectables/UserService.html",[268,1.011,346,1.447]],["body/injectables/UserService.html",[3,0.368,4,0.312,9,0.312,11,0.549,19,2.295,24,0.312,28,1.044,32,0.837,36,0.947,38,1.008,39,0.035,40,0.549,41,0.425,42,0.759,46,1.251,50,1.138,74,1.112,75,0.685,80,1.5,81,1.008,82,2.073,84,0.759,85,0.368,86,1.103,91,1.437,124,0.022,125,0.027,126,0.022,152,1.883,240,1.103,268,1.642,269,2.561,277,2.561,284,3.611,288,2.894,289,4.121,297,2.863,318,2.295,319,3.341,343,2.349,346,2.349,721,4.168,722,4.168,744,4.168,746,2.863,765,3.341,891,3.341,892,5.014,893,5.014,894,5.722,895,4.019,896,4.019,897,4.019]],["title/coverage.html",[898,3.509]],["body/coverage.html",[0,0.728,1,0.936,9,0.265,10,2.835,35,0.936,39,0.035,41,0.361,46,0.78,49,0.936,96,0.856,97,0.936,108,0.936,111,0.936,113,0.936,115,0.936,117,0.936,120,0.936,121,0.936,124,0.018,125,0.024,126,0.018,156,2.173,158,2.173,160,2.173,164,2.456,170,2.456,173,2.456,175,2.456,188,2.835,189,3.249,199,1.332,208,1.219,215,3.737,242,3.107,247,2.173,249,2.835,268,1.655,278,2.835,318,2.576,334,1.578,335,1.598,337,2.835,338,2.835,339,2.835,346,1.598,367,2.835,378,2.835,389,2.886,390,2.173,392,3.249,420,2.173,421,3.875,422,3.249,423,2.456,437,1.598,550,2.456,556,2.835,564,2.835,573,2.173,660,1.598,719,2.835,780,2.173,781,3.249,795,2.835,832,2.835,833,2.835,871,2.835,872,2.835,883,2.835,887,2.835,888,2.835,891,2.835,898,2.835,899,3.41,900,3.41,901,3.41,902,3.41,903,3.41,904,4.511,905,4.511,906,3.41,907,3.41,908,5.595,909,5.595,910,4.511,911,4.511,912,5.864,913,3.41,914,3.75,915,3.41,916,3.41,917,3.41,918,3.41,919,2.835,920,3.41,921,3.41,922,3.41,923,3.41,924,3.41,925,3.41,926,3.41,927,3.41,928,3.41,929,3.41,930,2.835,931,3.41,932,3.41,933,3.41,934,2.835,935,2.835,936,3.41,937,3.41]],["title/dependencies.html",[130,2.368,938,2.577]],["body/dependencies.html",[39,0.035,75,0.765,77,2.102,79,1.916,81,1.125,124,0.024,125,0.029,126,0.024,130,2.858,132,3.861,143,4.457,144,3.861,150,2.561,154,3.729,939,4.485,940,6.282,941,4.485,942,4.485,943,4.485,944,4.485,945,4.485,946,4.485,947,4.485,948,4.485,949,4.485,950,4.485,951,4.485,952,4.485,953,4.485,954,4.485]],["title/index.html",[24,0.2,642,1.642,955,2.577]],["body/index.html",[0,0.667,4,0.32,18,1.471,39,0.027,40,0.562,45,2.123,96,1.033,124,0.022,125,0.027,126,0.022,280,4.23,551,3.52,555,2.964,619,4.797,643,3.243,746,2.35,815,3.422,881,3.422,956,4.116,957,5.088,958,4.116,959,5.523,960,5.523,961,4.116,962,4.116,963,5.088,964,5.929,965,6.122,966,4.116,967,4.116,968,3.422,969,4.116,970,4.116,971,4.116,972,4.116,973,4.116,974,5.523,975,4.116,976,5.929,977,4.116,978,4.116,979,4.116,980,4.116,981,4.116,982,3.422,983,5.088,984,5.77,985,4.116,986,5.088,987,4.116,988,4.116,989,4.116,990,4.116,991,5.523,992,4.116,993,4.116,994,4.116,995,4.116]],["title/modules.html",[129,3.04]],["body/modules.html",[39,0.031,124,0.027,125,0.031,126,0.027,128,3.171,129,3.584,144,3.584,996,4.976,997,4.976,998,4.976]],["title/overview.html",[999,3.509]],["body/overview.html",[1,1.683,2,1.483,39,0.034,45,2.14,49,1.522,101,1.359,108,1.522,111,1.522,113,1.522,115,1.522,117,1.522,120,1.522,121,1.522,124,0.022,125,0.027,126,0.022,127,3.683,128,4.127,130,2.644,131,3.449,132,2.988,133,3.449,134,3.449,135,3.449,136,3.449,137,3.449,138,4.251,139,3.449,242,2.14,247,2.644,277,2.644,336,1.944,483,3.259,529,2.988,919,3.449,999,3.449,1000,4.149]],["title/routes.html",[147,3.04]],["body/routes.html",[39,0.031,124,0.027,125,0.031,126,0.027,147,3.628]],["title/miscellaneous/variables.html",[1001,2.142,1002,3.089]],["body/miscellaneous/variables.html",[24,0.267,39,0.035,41,0.621,68,3.354,69,2.752,70,1.609,96,1.137,97,0.942,114,1.124,124,0.018,125,0.024,126,0.018,156,2.887,158,2.887,191,2.337,194,2.587,209,1.244,210,1.769,230,1.936,273,2.305,279,2.188,297,1.96,318,3.08,340,2.854,343,2.123,390,2.188,392,2.472,405,3.232,417,3.232,418,3.232,419,3.232,420,2.188,421,3.263,422,3.263,423,3.263,435,2.854,437,1.609,483,2.887,550,3.263,551,2.188,552,3.767,553,2.472,554,2.854,555,2.472,560,3.263,570,2.887,573,3.437,574,2.587,639,3.573,663,2.472,666,2.887,698,3.263,780,2.188,781,2.472,880,4.484,914,4.216,930,2.854,934,2.854,935,2.854,968,2.854,982,3.767,1001,2.854,1002,2.854,1003,3.433,1004,3.433,1005,3.433,1006,5.072,1007,3.433,1008,4.531,1009,3.433,1010,4.531,1011,3.433,1012,3.433,1013,3.433,1014,4.531,1015,4.531,1016,3.433,1017,3.433,1018,3.433,1019,3.433,1020,3.433,1021,3.433,1022,3.433,1023,3.433,1024,3.433,1025,3.433,1026,3.433,1027,3.433,1028,3.433,1029,3.433]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":242,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["0.8.26",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["02",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["05",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["09:22",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":483,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"components/OptionsComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.9.0",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["1/11",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["101",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12/13",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["12/14",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["19:38",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":880,"title":{},"body":{"components/OptionsComponent.html":{},"miscellaneous/variables.html":{}}}],["2.5.4",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["2/7",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":545,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["22/25",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":529,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"components/OptionsComponent.html":{},"overview.html":{}}}],["33",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":358,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["4.1.1",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["4.17.11",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["4.3.1",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":549,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["401",{"_index":410,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{}}}],["5/7",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1000,"title":{},"body":{"overview.html":{}}}],["6.3.3",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["7.3.8",{"_index":962,"title":{},"body":{"index.html":{}}}],["7/9",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":919,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["9/11",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["92",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":78,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["_.find(this.fakedb.issues",{"_index":493,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["_.find(this.statuses",{"_index":238,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["_.find(this.users",{"_index":362,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["accessors",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["activatedroute",{"_index":588,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{}}}],["activatedroutesnapshot",{"_index":257,"title":{},"body":{"guards/AuthGuard.html":{}}}],["actual_component",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["add",{"_index":617,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/OptionsComponent.html":{}}}],["added",{"_index":621,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["adding",{"_index":640,"title":{},"body":{"components/IssueComponent.html":{}}}],["addorupdateissue",{"_index":723,"title":{},"body":{"injectables/IssueService.html":{}}}],["addorupdateissue(issue",{"_index":735,"title":{},"body":{"injectables/IssueService.html":{}}}],["addstatusnote",{"_index":724,"title":{},"body":{"injectables/IssueService.html":{}}}],["addstatusnote(note",{"_index":742,"title":{},"body":{"injectables/IssueService.html":{}}}],["always",{"_index":782,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["angular",{"_index":959,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/UserService.html":{}}}],["angular/compiler",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"dependencies.html":{}}}],["api",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IssueService.html":{},"injectables/UserService.html":{}}}],["api's",{"_index":786,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["api/categories",{"_index":773,"title":{},"body":{"injectables/IssueService.html":{}}}],["api/issues",{"_index":766,"title":{},"body":{"injectables/IssueService.html":{}}}],["api/issues/assignedto",{"_index":767,"title":{},"body":{"injectables/IssueService.html":{}}}],["api/issues/createdby",{"_index":768,"title":{},"body":{"injectables/IssueService.html":{}}}],["api/issues/status",{"_index":769,"title":{},"body":{"injectables/IssueService.html":{}}}],["api/notes",{"_index":778,"title":{},"body":{"injectables/IssueService.html":{}}}],["api/notes/issue",{"_index":775,"title":{},"body":{"injectables/IssueService.html":{}}}],["api/priorities",{"_index":774,"title":{},"body":{"injectables/IssueService.html":{}}}],["api/statuses",{"_index":772,"title":{},"body":{"injectables/IssueService.html":{}}}],["api/users",{"_index":897,"title":{},"body":{"injectables/UserService.html":{}}}],["api/users/authenticate",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["apiurl",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiurl_real",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"index.html":{}}}],["app.component",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":21,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":23,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":254,"title":{},"body":{"guards/AuthGuard.html":{}}}],["appmodule",{"_index":128,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["artifacts",{"_index":977,"title":{},"body":{"index.html":{}}}],["asc",{"_index":537,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["assigned",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["assignedto",{"_index":852,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["assignedtoid",{"_index":557,"title":{},"body":{"interfaces/Issue.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{}}}],["assignedtomecomponent",{"_index":108,"title":{"components/AssignedToMeComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["assignee",{"_index":365,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["assuring",{"_index":885,"title":{},"body":{"interfaces/Priority.html":{}}}],["auth",{"_index":783,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["authenticate",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["authentication",{"_index":250,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["authguard",{"_index":160,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["authheader",{"_index":447,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["authheader.startswith(\"bearer",{"_index":450,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["authorization",{"_index":793,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["authorize",{"_index":890,"title":{},"body":{"interfaces/User.html":{}}}],["authservice",{"_index":35,"title":{"injectables/AuthService.html":{}},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/ErrorInterceptor.html":{},"components/IssueComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"coverage.html":{}}}],["automatically",{"_index":969,"title":{},"body":{"index.html":{}}}],["backend",{"_index":552,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"miscellaneous/variables.html":{}}}],["backend.ts",{"_index":422,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["backend.ts:13",{"_index":426,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["backend.ts:20",{"_index":428,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["backend.ts:25",{"_index":429,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["backend.ts:30",{"_index":427,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["bearer",{"_index":794,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["behaviorsubject",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(json.parse(sessionstorage.getitem(\"currentuser",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["belong",{"_index":596,"title":{},"body":{"components/IssueComponent.html":{}}}],["between",{"_index":721,"title":{},"body":{"injectables/IssueService.html":{},"injectables/UserService.html":{}}}],["body",{"_index":546,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["boolean",{"_index":262,"title":{},"body":{"guards/AuthGuard.html":{}}}],["bootstrap",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["bootstrap/dropdown",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["bootstrapper",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["browse",{"_index":998,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodule",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["bsdropdownmodule",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["bsdropdownmodule.forroot",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":976,"title":{},"body":{"index.html":{}}}],["button",{"_index":609,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["c",{"_index":680,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["calls",{"_index":807,"title":{},"body":{"components/LoginComponent.html":{}}}],["canactivate",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{}}}],["canactivate(route",{"_index":256,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catcherror",{"_index":407,"title":{},"body":{"interceptors/ErrorInterceptor.html":{}}}],["catches",{"_index":266,"title":{},"body":{"guards/AuthGuard.html":{}}}],["categories",{"_index":570,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{},"miscellaneous/variables.html":{}}}],["category",{"_index":335,"title":{"interfaces/Category.html":{}},"body":{"interfaces/Category.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{}}}],["category.name",{"_index":706,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["categoryid",{"_index":558,"title":{},"body":{"interfaces/Issue.html":{},"components/NewIssueComponent.html":{}}}],["change",{"_index":881,"title":{},"body":{"components/OptionsComponent.html":{},"index.html":{}}}],["check",{"_index":994,"title":{},"body":{"index.html":{}}}],["class",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"injectables/UserService.html":{}}}],["cli",{"_index":960,"title":{},"body":{"index.html":{}}}],["clicked",{"_index":629,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["clicking",{"_index":608,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{}}}],["client",{"_index":647,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["closed",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["closedissuescomponent",{"_index":111,"title":{"components/ClosedIssuesComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["closedstatusid",{"_index":357,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["cluster_appmodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":972,"title":{},"body":{"index.html":{}}}],["coming",{"_index":627,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["communicate",{"_index":720,"title":{},"body":{"injectables/IssueService.html":{}}}],["communicating",{"_index":893,"title":{},"body":{"injectables/UserService.html":{}}}],["communication",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"overview.html":{}}}],["console.log(req.url",{"_index":454,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["const",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{}}}],["constructor",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":395,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["constructor(formbuilder",{"_index":803,"title":{},"body":{"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["constructor(http",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IssueService.html":{},"injectables/UserService.html":{}}}],["constructor(issueservice",{"_index":198,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["constructor(private",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/ErrorInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"injectables/UserService.html":{}}}],["constructor(route",{"_index":587,"title":{},"body":{"components/IssueComponent.html":{}}}],["constructor(router",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{}}}],["controls",{"_index":657,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["core",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":898,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":870,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["created",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"miscellaneous/variables.html":{}}}],["createdbyid",{"_index":559,"title":{},"body":{"interfaces/Issue.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{}}}],["createdbymecomponent",{"_index":113,"title":{"components/CreatedByMeComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["createdon",{"_index":560,"title":{},"body":{"interfaces/Issue.html":{},"interfaces/Note.html":{},"miscellaneous/variables.html":{}}}],["creating",{"_index":834,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["creation",{"_index":635,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["credentials",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["current",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["currently",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"injectables/AuthService.html":{},"components/CreatedByMeComponent.html":{},"interceptors/ErrorInterceptor.html":{},"components/IssueComponent.html":{}}}],["currentuser",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interceptors/JwtInterceptor.html":{}}}],["currentuser.token",{"_index":790,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["currentuser.username",{"_index":100,"title":{},"body":{"components/AppComponent.html":{}}}],["currentusersubject",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentuservalue",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["dashboard",{"_index":95,"title":{},"body":{"components/AppComponent.html":{},"components/DashboardComponent.html":{}}}],["dashboard'},{'name",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["dashboard.component.css",{"_index":383,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.component.html",{"_index":384,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard/assigned",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["dashboard/closed",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["dashboard/created",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["dashboard/dashboard.component",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["dashboardcomponent",{"_index":115,"title":{"components/DashboardComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["data.id",{"_index":869,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["database",{"_index":744,"title":{},"body":{"injectables/IssueService.html":{},"injectables/UserService.html":{}}}],["date",{"_index":563,"title":{},"body":{"interfaces/Issue.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{}}}],["date(\"2019",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(this.f.duedate.value",{"_index":866,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["date:'yyyy",{"_index":712,"title":{},"body":{"components/IssueComponent.html":{}}}],["date:\\'yyyy",{"_index":718,"title":{},"body":{"components/IssueComponent.html":{}}}],["db",{"_index":436,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["db.ts",{"_index":914,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":714,"title":{},"body":{"components/IssueComponent.html":{}}}],["declarations",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["default",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"injectables/UserService.html":{}}}],["delay",{"_index":434,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"injectables/IssueService.html":{},"interfaces/Priority.html":{}}}],["dematerialize",{"_index":433,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["dependencies",{"_index":130,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":517,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["detail",{"_index":565,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["details",{"_index":611,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["dev",{"_index":967,"title":{},"body":{"index.html":{}}}],["development",{"_index":555,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["devices",{"_index":63,"title":{},"body":{"components/AppComponent.html":{}}}],["directive",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["directives",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":975,"title":{},"body":{"index.html":{}}}],["directory",{"_index":979,"title":{},"body":{"index.html":{}}}],["display",{"_index":218,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["displayed",{"_index":265,"title":{},"body":{"guards/AuthGuard.html":{},"components/IssueComponent.html":{}}}],["displaying",{"_index":646,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["displays",{"_index":190,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{}}}],["dist",{"_index":978,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":488,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["dropdown",{"_index":839,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["due",{"_index":708,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["duedate",{"_index":853,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["dueon",{"_index":561,"title":{},"body":{"interfaces/Issue.html":{},"components/NewIssueComponent.html":{}}}],["dynamic",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":988,"title":{},"body":{"index.html":{}}}],["easily",{"_index":222,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/JwtInterceptor.html":{}}}],["element",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["email",{"_index":466,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["end",{"_index":619,"title":{},"body":{"components/IssueComponent.html":{},"index.html":{}}}],["entered",{"_index":808,"title":{},"body":{"components/LoginComponent.html":{}}}],["environment",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IssueService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environments/environment",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["err",{"_index":831,"title":{},"body":{"components/LoginComponent.html":{}}}],["err.error",{"_index":415,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"components/LoginComponent.html":{}}}],["err.message",{"_index":413,"title":{},"body":{"interceptors/ErrorInterceptor.html":{}}}],["err.status",{"_index":409,"title":{},"body":{"interceptors/ErrorInterceptor.html":{}}}],["err.statustext",{"_index":414,"title":{},"body":{"interceptors/ErrorInterceptor.html":{}}}],["error",{"_index":412,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["error(\"the",{"_index":485,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["error('username",{"_index":462,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["error(message",{"_index":548,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["error.error.message",{"_index":688,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["error.error[0",{"_index":689,"title":{},"body":{"components/IssueComponent.html":{}}}],["errorinterceptor",{"_index":390,"title":{"interceptors/ErrorInterceptor.html":{}},"body":{"interceptors/ErrorInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errorinterceptorprovider",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"interceptors/ErrorInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":650,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["example",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["execute",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["executed",{"_index":607,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["executes",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["exist",{"_index":489,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["existing",{"_index":479,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["export",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["f",{"_index":802,"title":{},"body":{"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["failed",{"_index":634,"title":{},"body":{"components/IssueComponent.html":{}}}],["fake",{"_index":435,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"miscellaneous/variables.html":{}}}],["fakebackendinterceptor",{"_index":420,"title":{"interceptors/FakeBackendInterceptor.html":{}},"body":{"interceptors/FakeBackendInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakebackendprovider",{"_index":550,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fakedb",{"_index":423,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":652,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["files",{"_index":971,"title":{},"body":{"index.html":{}}}],["first",{"_index":663,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["firstname",{"_index":468,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"interfaces/User.html":{}}}],["flag",{"_index":981,"title":{},"body":{"index.html":{}}}],["form",{"_index":613,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["formbuilder",{"_index":589,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["formgroup",{"_index":636,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["formsmodule",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["function",{"_index":542,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["functions",{"_index":787,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["further",{"_index":990,"title":{},"body":{"index.html":{}}}],["generate",{"_index":974,"title":{},"body":{"index.html":{}}}],["generated",{"_index":958,"title":{},"body":{"index.html":{}}}],["getall",{"_index":894,"title":{},"body":{"injectables/UserService.html":{}}}],["getallissues",{"_index":725,"title":{},"body":{"injectables/IssueService.html":{}}}],["getcategories",{"_index":580,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["getcurrentuservalue",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["getf",{"_index":818,"title":{},"body":{"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["getissue",{"_index":581,"title":{},"body":{"components/IssueComponent.html":{}}}],["getissue(id",{"_index":592,"title":{},"body":{"components/IssueComponent.html":{}}}],["getissuecategories",{"_index":726,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissuenotes",{"_index":727,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissuenotes(issueid",{"_index":748,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissuepriorities",{"_index":728,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissues",{"_index":195,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["getissuesbyasignee",{"_index":729,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissuesbyasignee(assignedtoid",{"_index":751,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissuesbycreator",{"_index":730,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissuesbycreator(createdbyid",{"_index":753,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissuesbystatus",{"_index":731,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissuesbystatus(options",{"_index":755,"title":{},"body":{"injectables/IssueService.html":{}}}],["getissuestatuses",{"_index":732,"title":{},"body":{"injectables/IssueService.html":{}}}],["getnotes",{"_index":582,"title":{},"body":{"components/IssueComponent.html":{}}}],["getnotes(id",{"_index":594,"title":{},"body":{"components/IssueComponent.html":{}}}],["getpriorities",{"_index":583,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["gets",{"_index":656,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["getsingleissue",{"_index":733,"title":{},"body":{"injectables/IssueService.html":{}}}],["getsingleissue(id",{"_index":760,"title":{},"body":{"injectables/IssueService.html":{}}}],["getsnf",{"_index":654,"title":{},"body":{"components/IssueComponent.html":{}}}],["getstatuses",{"_index":196,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["getstatusname",{"_index":197,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["getstatusname(id",{"_index":600,"title":{},"body":{"components/IssueComponent.html":{}}}],["getstatusname(issue.statusid",{"_index":246,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["getstatusname(note.statusid",{"_index":716,"title":{},"body":{"components/IssueComponent.html":{}}}],["getstatusname(selectedissue.statusid",{"_index":705,"title":{},"body":{"components/IssueComponent.html":{}}}],["getstatusname(statusid",{"_index":204,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["getting",{"_index":955,"title":{"index.html":{}},"body":{}}],["getusername",{"_index":344,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["getusername(id",{"_index":602,"title":{},"body":{"components/IssueComponent.html":{}}}],["getusername(issue.assignedtoid",{"_index":366,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["getusername(note.userid",{"_index":710,"title":{},"body":{"components/IssueComponent.html":{}}}],["getusername(userid",{"_index":349,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["getusers",{"_index":345,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["given",{"_index":207,"title":{},"body":{"components/AssignedToMeComponent.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["go",{"_index":993,"title":{},"body":{"index.html":{}}}],["good",{"_index":272,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guard",{"_index":247,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":248,"title":{},"body":{"guards/AuthGuard.html":{}}}],["guards/auth.guard",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["h:mm",{"_index":715,"title":{},"body":{"components/IssueComponent.html":{}}}],["header",{"_index":784,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["help",{"_index":991,"title":{},"body":{"index.html":{}}}],["helpers/error.interceptor",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["helpers/jwt.interceptor",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["helps",{"_index":645,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["here",{"_index":567,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["hiding",{"_index":60,"title":{},"body":{"components/AppComponent.html":{}}}],["hit",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holds",{"_index":380,"title":{},"body":{"components/DashboardComponent.html":{}}}],["html",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["http",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interceptors/FakeBackendInterceptor.html":{},"injectables/IssueService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":968,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["http_interceptors",{"_index":405,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{},"miscellaneous/variables.html":{}}}],["httpclient",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IssueService.html":{},"injectables/UserService.html":{}}}],["httpclientmodule",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["httpevent",{"_index":404,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["httphandler",{"_index":400,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["httpinterceptor",{"_index":403,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["httprequest",{"_index":398,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["httpresponse",{"_index":430,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["https://csabav.github.io/issue_tracker",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://localhost:5001",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://temalabor",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["i+1",{"_index":244,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["i.assignedtoid",{"_index":525,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["i.createdbyid",{"_index":527,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["i.id",{"_index":480,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["i.statusid",{"_index":530,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["id",{"_index":209,"title":{},"body":{"components/AssignedToMeComponent.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interfaces/Note.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["if(currentuser",{"_index":271,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/JwtInterceptor.html":{}}}],["if(user",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["incorrect",{"_index":463,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["index",{"_index":24,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":268,"title":{"injectables/AuthService.html":{},"injectables/IssueService.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IssueService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":651,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["intercept",{"_index":394,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["intercept(req",{"_index":397,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["interceptor",{"_index":389,"title":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}},"body":{"interceptors/FakeBackendInterceptor.html":{},"coverage.html":{}}}],["interceptors",{"_index":391,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["interface",{"_index":334,"title":{"interfaces/Category.html":{},"interfaces/Issue.html":{},"interfaces/Note.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{}},"body":{"interfaces/Category.html":{},"interfaces/Issue.html":{},"interfaces/Note.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":336,"title":{},"body":{"interfaces/Category.html":{},"interfaces/Issue.html":{},"interfaces/Note.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"overview.html":{}}}],["interfcae",{"_index":889,"title":{},"body":{"interfaces/User.html":{}}}],["isloggedin",{"_index":449,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["issue",{"_index":97,"title":{"interfaces/Issue.html":{}},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issue's",{"_index":610,"title":{},"body":{"components/IssueComponent.html":{}}}],["issue'},{'name",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["issue).pipe(map(issue",{"_index":777,"title":{},"body":{"injectables/IssueService.html":{}}}],["issue.component",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["issue.component.css",{"_index":568,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["issue.component.html",{"_index":569,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["issue.component.ts",{"_index":833,"title":{},"body":{"components/NewIssueComponent.html":{},"coverage.html":{}}}],["issue.component.ts:100",{"_index":837,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:110",{"_index":841,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:121",{"_index":843,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:26",{"_index":849,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:31",{"_index":844,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:36",{"_index":847,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:41",{"_index":845,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:46",{"_index":848,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:51",{"_index":846,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:56",{"_index":836,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:64",{"_index":842,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:82",{"_index":850,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.component.ts:90",{"_index":840,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issue.id",{"_index":477,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"injectables/IssueService.html":{}}}],["issue.title",{"_index":245,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["issue/:id",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["issue/issue.component",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["issue/new",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"components/NewIssueComponent.html":{},"coverage.html":{}}}],["issuecomponent",{"_index":117,"title":{"components/IssueComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["issueerror",{"_index":571,"title":{},"body":{"components/IssueComponent.html":{}}}],["issueform",{"_index":835,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["issueid",{"_index":666,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interfaces/Note.html":{},"miscellaneous/variables.html":{}}}],["issueloading",{"_index":572,"title":{},"body":{"components/IssueComponent.html":{}}}],["issues",{"_index":191,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{},"miscellaneous/variables.html":{}}}],["issues'},{'name",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["issues.component",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["issues.component.css",{"_index":341,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["issues.component.html",{"_index":342,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["issues.component.ts",{"_index":339,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"coverage.html":{}}}],["issues.component.ts:22",{"_index":353,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["issues.component.ts:27",{"_index":347,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["issues.component.ts:31",{"_index":352,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["issues.component.ts:39",{"_index":348,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["issues.component.ts:49",{"_index":351,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["issues.component.ts:59",{"_index":350,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["issues/closed",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"components/ClosedIssuesComponent.html":{},"coverage.html":{}}}],["issueservice",{"_index":199,"title":{"injectables/IssueService.html":{}},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{},"coverage.html":{}}}],["issuetracker",{"_index":956,"title":{},"body":{"index.html":{}}}],["it's",{"_index":740,"title":{},"body":{"injectables/IssueService.html":{}}}],["js",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["json.parse(localstorage.getitem('fakedb",{"_index":442,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["json.stringify(this.fakedb",{"_index":445,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["json.stringify(user",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":451,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"interfaces/User.html":{}}}],["jwtinterceptor",{"_index":780,"title":{"interceptors/JwtInterceptor.html":{}},"body":{"interceptors/JwtInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtinterceptorprovider",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"interceptors/JwtInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["karma",{"_index":987,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landing",{"_index":379,"title":{},"body":{"components/DashboardComponent.html":{}}}],["lastname",{"_index":470,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"interfaces/User.html":{}}}],["legend",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"overview.html":{}}}],["less",{"_index":554,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"miscellaneous/variables.html":{}}}],["level",{"_index":879,"title":{},"body":{"components/OptionsComponent.html":{}}}],["link",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":756,"title":{},"body":{"injectables/IssueService.html":{}}}],["load",{"_index":424,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["loading",{"_index":798,"title":{},"body":{"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["localstorage.clear",{"_index":439,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["localstorage.setitem(\"fakedb",{"_index":444,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["location.reload(true",{"_index":411,"title":{},"body":{"interceptors/ErrorInterceptor.html":{}}}],["lodash",{"_index":79,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"dependencies.html":{}}}],["logged",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/CreatedByMeComponent.html":{}}}],["login",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["login'},{'name",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["login(username",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.component.css",{"_index":796,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.html",{"_index":797,"title":{},"body":{"components/LoginComponent.html":{}}}],["login/login.component",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["logincomponent",{"_index":49,"title":{"components/LoginComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["loginform",{"_index":799,"title":{},"body":{"components/LoginComponent.html":{}}}],["logout",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["logs",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["look",{"_index":211,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["main",{"_index":12,"title":{},"body":{"components/AppComponent.html":{}}}],["map",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["matching",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["materialize",{"_index":432,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["maxissue",{"_index":481,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["maxissue.id",{"_index":482,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["maxnote",{"_index":497,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["maxnote.id",{"_index":498,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["me'},{'name",{"_index":110,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["me.component",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["me.component.css",{"_index":192,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["me.component.html",{"_index":193,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["me.component.ts",{"_index":189,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"coverage.html":{}}}],["me.component.ts:21",{"_index":214,"title":{},"body":{"components/AssignedToMeComponent.html":{}}}],["me.component.ts:23",{"_index":375,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["me.component.ts:26",{"_index":200,"title":{},"body":{"components/AssignedToMeComponent.html":{}}}],["me.component.ts:28",{"_index":376,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["me.component.ts:30",{"_index":213,"title":{},"body":{"components/AssignedToMeComponent.html":{}}}],["me.component.ts:33",{"_index":368,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["me.component.ts:37",{"_index":374,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["me.component.ts:38",{"_index":201,"title":{},"body":{"components/AssignedToMeComponent.html":{}}}],["me.component.ts:46",{"_index":369,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["me.component.ts:47",{"_index":203,"title":{},"body":{"components/AssignedToMeComponent.html":{}}}],["me.component.ts:55",{"_index":370,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["me.component.ts:57",{"_index":206,"title":{},"body":{"components/AssignedToMeComponent.html":{}}}],["me.component.ts:65",{"_index":371,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["me.component.ts:73",{"_index":373,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["me.component.ts:83",{"_index":372,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["me/assigned",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"coverage.html":{}}}],["me/created",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"components/CreatedByMeComponent.html":{},"coverage.html":{}}}],["mergemap",{"_index":431,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["message",{"_index":547,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["messages",{"_index":626,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["methods",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":1001,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":713,"title":{},"body":{"components/IssueComponent.html":{}}}],["models/category.type",{"_index":659,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{}}}],["models/issue.type",{"_index":387,"title":{},"body":{"components/DashboardComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{}}}],["models/note.type",{"_index":438,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["models/priority.type",{"_index":661,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{}}}],["models/status.type",{"_index":662,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{}}}],["models/user.type",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{},"injectables/UserService.html":{}}}],["module",{"_index":127,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":129,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["more",{"_index":992,"title":{},"body":{"index.html":{}}}],["morning",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multi",{"_index":419,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{},"miscellaneous/variables.html":{}}}],["n",{"_index":515,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["n.id",{"_index":495,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["n.issueid",{"_index":516,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["name",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"injectables/UserService.html":{},"index.html":{}}}],["names",{"_index":221,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["navbar",{"_index":61,"title":{},"body":{"components/AppComponent.html":{}}}],["navbaropen",{"_index":27,"title":{},"body":{"components/AppComponent.html":{}}}],["navigate",{"_index":815,"title":{},"body":{"components/LoginComponent.html":{},"index.html":{}}}],["navigates",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/NewIssueComponent.html":{}}}],["navigationend",{"_index":76,"title":{},"body":{"components/AppComponent.html":{}}}],["need",{"_index":504,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["new",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newissue",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"components/NewIssueComponent.html":{}}}],["newissuecomponent",{"_index":120,"title":{"components/NewIssueComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["newly",{"_index":620,"title":{},"body":{"components/IssueComponent.html":{}}}],["newnote",{"_index":695,"title":{},"body":{"components/IssueComponent.html":{}}}],["next",{"_index":399,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["next.handle(req",{"_index":538,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["next.handle(req).pipe(catcherror(err",{"_index":408,"title":{},"body":{"interceptors/ErrorInterceptor.html":{}}}],["ng",{"_index":965,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["ngoninit",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["ngx",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["note",{"_index":437,"title":{"interfaces/Note.html":{}},"body":{"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interfaces/Note.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["note).pipe(map(note",{"_index":779,"title":{},"body":{"injectables/IssueService.html":{}}}],["note.createdon",{"_index":711,"title":{},"body":{"components/IssueComponent.html":{}}}],["note.id",{"_index":496,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["note.issueid",{"_index":494,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["note.text",{"_index":717,"title":{},"body":{"components/IssueComponent.html":{}}}],["notes",{"_index":573,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["now",{"_index":340,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":205,"title":{},"body":{"components/AssignedToMeComponent.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interfaces/Note.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{}}}],["object",{"_index":639,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":722,"title":{},"body":{"injectables/IssueService.html":{},"injectables/UserService.html":{}}}],["observable",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/NewIssueComponent.html":{},"injectables/UserService.html":{}}}],["of(delay(200",{"_index":446,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["of(new",{"_index":544,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["of(null).pipe(mergemap",{"_index":453,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok",{"_index":464,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(_.filter(this.fakedb.issues",{"_index":524,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(_.find(this.fakedb.issues",{"_index":522,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(_.orderby(_.filter(this.fakedb.notes",{"_index":514,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(_.orderby(this.fakedb.priorities",{"_index":536,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(body",{"_index":543,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(issue",{"_index":490,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(note",{"_index":500,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(this.fakedb.categories",{"_index":534,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(this.fakedb.issues",{"_index":519,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(this.fakedb.statuses",{"_index":532,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ok(userresults",{"_index":509,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["oninit",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["onsaveissue",{"_index":584,"title":{},"body":{"components/IssueComponent.html":{}}}],["onstatusnotesave",{"_index":585,"title":{},"body":{"components/IssueComponent.html":{}}}],["onsubmit",{"_index":801,"title":{},"body":{"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["open",{"_index":72,"title":{},"body":{"components/AppComponent.html":{}}}],["optional",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"interfaces/User.html":{},"injectables/UserService.html":{}}}],["options",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["options.component.css",{"_index":873,"title":{},"body":{"components/OptionsComponent.html":{}}}],["options.component.html",{"_index":874,"title":{},"body":{"components/OptionsComponent.html":{}}}],["options.statusid",{"_index":770,"title":{},"body":{"injectables/IssueService.html":{}}}],["options.userid",{"_index":771,"title":{},"body":{"injectables/IssueService.html":{}}}],["options/options.component",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["optionscomponent",{"_index":121,"title":{"components/OptionsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"coverage.html":{},"overview.html":{}}}],["order",{"_index":886,"title":{},"body":{"interfaces/Priority.html":{}}}],["originating",{"_index":813,"title":{},"body":{"components/LoginComponent.html":{}}}],["otherwise",{"_index":741,"title":{},"body":{"injectables/IssueService.html":{}}}],["out",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":999,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":856,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["package",{"_index":938,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":264,"title":{},"body":{"guards/AuthGuard.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["param",{"_index":237,"title":{},"body":{"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"injectables/UserService.html":{}}}],["params",{"_index":739,"title":{},"body":{"injectables/IssueService.html":{}}}],["params['id",{"_index":667,"title":{},"body":{"components/IssueComponent.html":{}}}],["parseint(urlparts[urlparts.length",{"_index":521,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["part",{"_index":54,"title":{},"body":{"components/AppComponent.html":{}}}],["passed",{"_index":738,"title":{},"body":{"injectables/IssueService.html":{}}}],["password",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/LoginComponent.html":{},"interfaces/User.html":{}}}],["password}).pipe(map(user",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["path",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["permission",{"_index":882,"title":{},"body":{"components/OptionsComponent.html":{}}}],["pick",{"_index":623,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["pipe(delay(200",{"_index":540,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["pipe(dematerialize",{"_index":541,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["pipe(materialize",{"_index":539,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["place",{"_index":553,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"components/NewIssueComponent.html":{},"miscellaneous/variables.html":{}}}],["please",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":220,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["post",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"interceptors/FakeBackendInterceptor.html":{},"injectables/IssueService.html":{}}}],["pre",{"_index":884,"title":{},"body":{"interfaces/Priority.html":{}}}],["priorities",{"_index":574,"title":{},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{},"interfaces/Priority.html":{},"miscellaneous/variables.html":{}}}],["priority",{"_index":660,"title":{"interfaces/Priority.html":{}},"body":{"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"coverage.html":{}}}],["priority.name",{"_index":707,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["priorityid",{"_index":562,"title":{},"body":{"interfaces/Issue.html":{},"components/NewIssueComponent.html":{}}}],["private",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["process",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["prod",{"_index":980,"title":{},"body":{"index.html":{}}}],["production",{"_index":982,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":957,"title":{},"body":{"index.html":{}}}],["properly",{"_index":503,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["properties",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{}}}],["protractor",{"_index":989,"title":{},"body":{"index.html":{}}}],["provide",{"_index":417,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{},"miscellaneous/variables.html":{}}}],["providedin",{"_index":269,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/IssueService.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["put",{"_index":737,"title":{},"body":{"injectables/IssueService.html":{}}}],["queryparams",{"_index":274,"title":{},"body":{"guards/AuthGuard.html":{}}}],["reactive",{"_index":638,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["reactiveformsmodule",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["readme",{"_index":995,"title":{},"body":{"index.html":{}}}],["redirectto",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["related",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["reload",{"_index":970,"title":{},"body":{"index.html":{}}}],["removing",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["represents",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["req",{"_index":402,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{}}}],["req.body.issue",{"_index":475,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.body.note",{"_index":492,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.body.password",{"_index":461,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.body.username",{"_index":459,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.clone",{"_index":791,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["req.headers.get(\"authorization",{"_index":448,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.method",{"_index":456,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.endswith(\"/categories",{"_index":533,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.endswith(\"/issues",{"_index":518,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.endswith(\"/issues/update",{"_index":474,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.endswith(\"/notes/add",{"_index":491,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.endswith(\"/priorities",{"_index":535,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.endswith(\"/statuses",{"_index":531,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.endswith(\"/users",{"_index":501,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.endswith(\"/users/auth",{"_index":455,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.match(/\\/issue\\/\\d",{"_index":520,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.match(/\\/issues\\/assignedto\\/\\d",{"_index":523,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.match(/\\/issues\\/createdby\\/\\d",{"_index":526,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.match(/\\/issues\\/status\\/(\\d+)\\/user\\/(\\d",{"_index":528,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.match(/\\/notes\\/issue\\/(\\d",{"_index":510,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["req.url.split",{"_index":512,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["request",{"_index":267,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{}}}],["requested",{"_index":263,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requests",{"_index":253,"title":{},"body":{"guards/AuthGuard.html":{}}}],["required",{"_index":709,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["reset",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["responsible",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{}}}],["responsive",{"_index":55,"title":{},"body":{"components/AppComponent.html":{}}}],["result",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":223,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["retrieves",{"_index":202,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["retrieving",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":240,"title":{},"body":{"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"injectables/UserService.html":{}}}],["returnurl",{"_index":275,"title":{},"body":{"guards/AuthGuard.html":{},"components/LoginComponent.html":{}}}],["reuturns",{"_index":261,"title":{},"body":{"guards/AuthGuard.html":{}}}],["right",{"_index":816,"title":{},"body":{"components/LoginComponent.html":{}}}],["root",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/IssueService.html":{},"injectables/UserService.html":{}}}],["root'},{'name",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["route",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{}}}],["router",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["routermodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule.forroot(routes",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["routerstatesnapshot",{"_index":259,"title":{},"body":{"guards/AuthGuard.html":{}}}],["routes",{"_index":147,"title":{"routes.html":{}},"body":{"modules/AppModule.html":{},"routes.html":{}}}],["run",{"_index":964,"title":{},"body":{"index.html":{}}}],["running",{"_index":643,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"index.html":{}}}],["rxjs",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/NewIssueComponent.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/LoginComponent.html":{}}}],["s",{"_index":236,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["s.id",{"_index":239,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["save",{"_index":425,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["saves",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["saving",{"_index":615,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["scaffolding",{"_index":973,"title":{},"body":{"index.html":{}}}],["selected",{"_index":597,"title":{},"body":{"components/IssueComponent.html":{}}}],["selectedissue",{"_index":575,"title":{},"body":{"components/IssueComponent.html":{}}}],["selectedissue.title",{"_index":704,"title":{},"body":{"components/IssueComponent.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["serve",{"_index":966,"title":{},"body":{"index.html":{}}}],["server",{"_index":963,"title":{},"body":{"index.html":{}}}],["service",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"interceptors/FakeBackendInterceptor.html":{},"injectables/IssueService.html":{},"miscellaneous/variables.html":{}}}],["services/auth.service",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"interceptors/ErrorInterceptor.html":{},"components/IssueComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["services/issue.service",{"_index":388,"title":{},"body":{"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["services/user.service",{"_index":658,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["servie",{"_index":892,"title":{},"body":{"injectables/UserService.html":{}}}],["session",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessionstorage.removeitem(\"currentuser",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessionstorage.setitem(\"currentuser",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"components/IssueComponent.html":{}}}],["setheaders",{"_index":792,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["sets",{"_index":838,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["settings",{"_index":877,"title":{},"body":{"components/OptionsComponent.html":{}}}],["several",{"_index":381,"title":{},"body":{"components/DashboardComponent.html":{}}}],["showing",{"_index":59,"title":{},"body":{"components/AppComponent.html":{}}}],["shows",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{}}}],["shutting",{"_index":251,"title":{},"body":{"guards/AuthGuard.html":{}}}],["side",{"_index":648,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["single",{"_index":762,"title":{},"body":{"injectables/IssueService.html":{}}}],["smaller",{"_index":62,"title":{},"body":{"components/AppComponent.html":{}}}],["snf",{"_index":586,"title":{},"body":{"components/IssueComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"components/OptionsComponent.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"index.html":{}}}],["src/.../environment.prod.ts",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error.interceptor.ts",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../fake",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../jwt.interceptor.ts",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:23",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:28",{"_index":37,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:32",{"_index":52,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:39",{"_index":43,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:47",{"_index":53,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/dashboard/assigned",{"_index":188,"title":{},"body":{"components/AssignedToMeComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/closed",{"_index":338,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/created",{"_index":367,"title":{},"body":{"components/CreatedByMeComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/dashboard.component.ts",{"_index":378,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{}}}],["src/app/dashboard/dashboard.component.ts:15",{"_index":385,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/dashboard/dashboard.component.ts:19",{"_index":386,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/guards/auth.guard.ts",{"_index":249,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/guards/auth.guard.ts:11",{"_index":255,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/guards/auth.guard.ts:21",{"_index":260,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/helpers/error.interceptor.ts",{"_index":392,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/helpers/error.interceptor.ts:11",{"_index":396,"title":{},"body":{"interceptors/ErrorInterceptor.html":{}}}],["src/app/helpers/error.interceptor.ts:14",{"_index":401,"title":{},"body":{"interceptors/ErrorInterceptor.html":{}}}],["src/app/helpers/fake",{"_index":421,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/helpers/jwt.interceptor.ts",{"_index":781,"title":{},"body":{"interceptors/JwtInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/helpers/jwt.interceptor.ts:11",{"_index":788,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["src/app/helpers/jwt.interceptor.ts:14",{"_index":789,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["src/app/issue/issue.component.ts",{"_index":564,"title":{},"body":{"components/IssueComponent.html":{},"coverage.html":{}}}],["src/app/issue/issue.component.ts:111",{"_index":593,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:121",{"_index":604,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:130",{"_index":599,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:137",{"_index":591,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:146",{"_index":598,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:153",{"_index":595,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:163",{"_index":603,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:174",{"_index":601,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:182",{"_index":606,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:197",{"_index":655,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:204",{"_index":616,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:30",{"_index":632,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:35",{"_index":653,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:40",{"_index":633,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:45",{"_index":622,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:50",{"_index":631,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:55",{"_index":630,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:60",{"_index":628,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:65",{"_index":625,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:70",{"_index":637,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:75",{"_index":644,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:80",{"_index":641,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:85",{"_index":590,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/issue/issue.component.ts:93",{"_index":605,"title":{},"body":{"components/IssueComponent.html":{}}}],["src/app/login/login.component.ts",{"_index":795,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/login/login.component.ts:21",{"_index":810,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:26",{"_index":809,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:31",{"_index":817,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:36",{"_index":811,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:41",{"_index":804,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:45",{"_index":805,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:59",{"_index":819,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:67",{"_index":806,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/models/category.type.ts",{"_index":337,"title":{},"body":{"interfaces/Category.html":{},"coverage.html":{}}}],["src/app/models/issue.type",{"_index":224,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["src/app/models/issue.type.ts",{"_index":556,"title":{},"body":{"interfaces/Issue.html":{},"coverage.html":{}}}],["src/app/models/note.type.ts",{"_index":871,"title":{},"body":{"interfaces/Note.html":{},"coverage.html":{}}}],["src/app/models/priority.type.ts",{"_index":883,"title":{},"body":{"interfaces/Priority.html":{},"coverage.html":{}}}],["src/app/models/status.type",{"_index":227,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["src/app/models/status.type.ts",{"_index":887,"title":{},"body":{"interfaces/Status.html":{},"coverage.html":{}}}],["src/app/models/user.type",{"_index":355,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["src/app/models/user.type.ts",{"_index":888,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{}}}],["src/app/new",{"_index":832,"title":{},"body":{"components/NewIssueComponent.html":{},"coverage.html":{}}}],["src/app/options/options.component.ts",{"_index":872,"title":{},"body":{"components/OptionsComponent.html":{},"coverage.html":{}}}],["src/app/options/options.component.ts:12",{"_index":876,"title":{},"body":{"components/OptionsComponent.html":{}}}],["src/app/options/options.component.ts:8",{"_index":875,"title":{},"body":{"components/OptionsComponent.html":{}}}],["src/app/services/auth.service",{"_index":226,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["src/app/services/auth.service.ts",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts:18",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:23",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:36",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:47",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:61",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/issue.service",{"_index":225,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["src/app/services/issue.service.ts",{"_index":719,"title":{},"body":{"injectables/IssueService.html":{},"coverage.html":{}}}],["src/app/services/issue.service.ts:102",{"_index":736,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:120",{"_index":743,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:20",{"_index":734,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:27",{"_index":745,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:36",{"_index":761,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:45",{"_index":752,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:54",{"_index":754,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:63",{"_index":757,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:70",{"_index":759,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:77",{"_index":747,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:84",{"_index":750,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/issue.service.ts:93",{"_index":749,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/app/services/user.service",{"_index":354,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["src/app/services/user.service.ts",{"_index":891,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/app/services/user.service.ts:13",{"_index":895,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app/services/user.service.ts:19",{"_index":896,"title":{},"body":{"injectables/UserService.html":{}}}],["src/environments/environment",{"_index":764,"title":{},"body":{"injectables/IssueService.html":{}}}],["src/environments/environment.prod.ts",{"_index":934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":642,"title":{"index.html":{}},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["starting",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["starts",{"_index":614,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["state",{"_index":258,"title":{},"body":{"guards/AuthGuard.html":{}}}],["state.url",{"_index":276,"title":{},"body":{"guards/AuthGuard.html":{}}}],["statements",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":208,"title":{"interfaces/Status.html":{}},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"interfaces/Status.html":{},"coverage.html":{}}}],["status.name",{"_index":241,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["statuses",{"_index":194,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"miscellaneous/variables.html":{}}}],["statusid",{"_index":210,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interfaces/Note.html":{},"miscellaneous/variables.html":{}}}],["statusnoteerror",{"_index":576,"title":{},"body":{"components/IssueComponent.html":{}}}],["statusnoteform",{"_index":577,"title":{},"body":{"components/IssueComponent.html":{}}}],["statusnoteloading",{"_index":578,"title":{},"body":{"components/IssueComponent.html":{}}}],["statusnotesubmitted",{"_index":579,"title":{},"body":{"components/IssueComponent.html":{}}}],["storage",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["stored",{"_index":746,"title":{},"body":{"injectables/IssueService.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"injectables/UserService.html":{},"index.html":{}}}],["stores",{"_index":219,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{}}}],["storing",{"_index":216,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["string",{"_index":212,"title":{},"body":{"components/AssignedToMeComponent.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["styleurls",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["sub",{"_index":382,"title":{},"body":{"components/DashboardComponent.html":{}}}],["subject",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["submitted",{"_index":800,"title":{},"body":{"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["successful",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["support",{"_index":996,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":997,"title":{},"body":{"modules.html":{}}}],["system",{"_index":57,"title":{},"body":{"components/AppComponent.html":{}}}],["table",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["tasks",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["templateurl",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["test",{"_index":985,"title":{},"body":{"index.html":{}}}],["tests",{"_index":984,"title":{},"body":{"index.html":{}}}],["text",{"_index":698,"title":{},"body":{"components/IssueComponent.html":{},"interfaces/Note.html":{},"miscellaneous/variables.html":{}}}],["thing",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.authservice.currentuser.subscribe(u",{"_index":88,"title":{},"body":{"components/AppComponent.html":{}}}],["this.authservice.currentuservalue",{"_index":270,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/JwtInterceptor.html":{}}}],["this.authservice.currentuservalue.id",{"_index":231,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.authservice.login(this.f.username.value",{"_index":828,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authservice.logout",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"interceptors/ErrorInterceptor.html":{},"components/LoginComponent.html":{}}}],["this.categories",{"_index":679,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.currentuser",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"injectables/AuthService.html":{}}}],["this.currentusersubject",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentusersubject.asobservable",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentusersubject.next(null",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentusersubject.next(user",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.currentusersubject.value",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.error",{"_index":826,"title":{},"body":{"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.f.assignedto.setvalue(this.users[0",{"_index":859,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.f.assignedto.value.id",{"_index":863,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.f.category.setvalue(this.categories[0",{"_index":858,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.f.category.value.id",{"_index":864,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.f.description.value",{"_index":862,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.f.password.value).pipe(first()).subscribe(data",{"_index":829,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.f.priority.setvalue(this.priorities[0",{"_index":857,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.f.priority.value.id",{"_index":865,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.f.title.value",{"_index":861,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.fakedb",{"_index":441,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["this.fakedb.issues.push(issue",{"_index":484,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["this.fakedb.notes.push(note",{"_index":499,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["this.fakedb.users.find(u",{"_index":457,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["this.fakedb.users.foreach(user",{"_index":506,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["this.formbuilder.group",{"_index":673,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.getcategories",{"_index":670,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.getissue(issueid",{"_index":668,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.getissue(this.selectedissue.id",{"_index":702,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.getissues",{"_index":228,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["this.getnotes(issueid",{"_index":669,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.getnotes(this.selectedissue.id",{"_index":701,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.getpriorities",{"_index":671,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.getstatuses",{"_index":229,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["this.getusers",{"_index":356,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.http.get(environment.apiurl_real",{"_index":765,"title":{},"body":{"injectables/IssueService.html":{},"injectables/UserService.html":{}}}],["this.http.post(environment.apiurl_real",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/IssueService.html":{}}}],["this.http.put(environment.apiurl_real",{"_index":776,"title":{},"body":{"injectables/IssueService.html":{}}}],["this.issueerror",{"_index":685,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.issueform",{"_index":851,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.issueform.controls",{"_index":854,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.issueform.invalid",{"_index":860,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.issueloading",{"_index":686,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.issues",{"_index":232,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["this.issueservice.addorupdateissue(newissue).subscribe(data",{"_index":867,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.issueservice.addorupdateissue(this.selectedissue).pipe(first()).subscribe(data",{"_index":687,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.issueservice.addstatusnote(newnote).pipe(first()).subscribe(data",{"_index":700,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.issueservice.getissuecategories().subscribe(c",{"_index":678,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.issueservice.getissuenotes(id",{"_index":684,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.issueservice.getissuepriorities",{"_index":682,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.issueservice.getissuepriorities().subscribe(p",{"_index":855,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.issueservice.getissuesbyasignee(userid",{"_index":233,"title":{},"body":{"components/AssignedToMeComponent.html":{}}}],["this.issueservice.getissuesbycreator(userid",{"_index":377,"title":{},"body":{"components/CreatedByMeComponent.html":{}}}],["this.issueservice.getissuesbystatus",{"_index":359,"title":{},"body":{"components/ClosedIssuesComponent.html":{}}}],["this.issueservice.getissuestatuses().subscribe(s",{"_index":234,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["this.issueservice.getsingleissue(id).subscribe(i",{"_index":675,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.load",{"_index":440,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["this.loading",{"_index":827,"title":{},"body":{"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.loginform",{"_index":820,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.controls",{"_index":823,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.loginform.invalid",{"_index":825,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.navbaropen",{"_index":94,"title":{},"body":{"components/AppComponent.html":{}}}],["this.notes",{"_index":683,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.priorities",{"_index":681,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.returnurl",{"_index":821,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.route.params.subscribe(params",{"_index":665,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.route.snapshot.queryparams[\"returnurl",{"_index":822,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.router.navigate([\"/issue",{"_index":868,"title":{},"body":{"components/NewIssueComponent.html":{}}}],["this.router.navigate([\"/login",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{}}}],["this.router.navigate([this.returnurl",{"_index":830,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.save",{"_index":443,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["this.selectedissue",{"_index":676,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.selectedissue.id",{"_index":696,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.snf.notes.value",{"_index":699,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.snf.status.setvalue(this.selectedissue.statusid",{"_index":677,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.snf.status.value",{"_index":697,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.statuses",{"_index":235,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["this.statusnoteerror",{"_index":693,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.statusnoteform",{"_index":672,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.statusnoteform.controls",{"_index":690,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.statusnoteform.invalid",{"_index":692,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.statusnoteform.reset",{"_index":703,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.statusnoteloading",{"_index":694,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.statusnotesubmitted",{"_index":691,"title":{},"body":{"components/IssueComponent.html":{}}}],["this.submitted",{"_index":824,"title":{},"body":{"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.users",{"_index":361,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["this.userservice.getall().subscribe(u",{"_index":360,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["throwerror",{"_index":406,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{}}}],["throwerror(error",{"_index":416,"title":{},"body":{"interceptors/ErrorInterceptor.html":{}}}],["ticket",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timer",{"_index":763,"title":{},"body":{"injectables/IssueService.html":{}}}],["title",{"_index":243,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interfaces/Issue.html":{},"components/NewIssueComponent.html":{}}}],["todo",{"_index":502,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["togglenavbar",{"_index":31,"title":{},"body":{"components/AppComponent.html":{}}}],["token",{"_index":452,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{},"interfaces/User.html":{}}}],["tracker.azurewebsites.net",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["tries",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["true",{"_index":273,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"miscellaneous/variables.html":{}}}],["trying",{"_index":487,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["tslib",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/Category.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interfaces/Issue.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interceptors/JwtInterceptor.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Note.html":{},"interfaces/Priority.html":{},"interfaces/Status.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["u",{"_index":90,"title":{},"body":{"components/AppComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["u.id",{"_index":363,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["u.password",{"_index":460,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["u.username",{"_index":458,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["ui",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{}}}],["unauthorized",{"_index":252,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/FakeBackendInterceptor.html":{}}}],["unit",{"_index":983,"title":{},"body":{"index.html":{}}}],["up",{"_index":624,"title":{},"body":{"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["update",{"_index":478,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{}}}],["updated",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updates",{"_index":618,"title":{},"body":{"components/IssueComponent.html":{}}}],["updatesuccess",{"_index":476,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["url",{"_index":812,"title":{},"body":{"components/LoginComponent.html":{}}}],["urlparts",{"_index":511,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["urlparts[urlparts.length",{"_index":513,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["use",{"_index":551,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":418,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interceptors/FakeBackendInterceptor.html":{},"interceptors/JwtInterceptor.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":393,"title":{},"body":{"interceptors/ErrorInterceptor.html":{},"interfaces/User.html":{}}}],["user",{"_index":46,"title":{"interfaces/User.html":{}},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.email",{"_index":467,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["user.firstname",{"_index":469,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["user.id",{"_index":465,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["user.lastname",{"_index":471,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["user.token",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.userlevelid",{"_index":473,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["user.username",{"_index":364,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["userid",{"_index":230,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"injectables/IssueService.html":{},"interfaces/Note.html":{},"miscellaneous/variables.html":{}}}],["userlevelid",{"_index":472,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["username",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"interfaces/User.html":{}}}],["userresult",{"_index":507,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["userresults",{"_index":505,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["userresults.push(userresult",{"_index":508,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["users",{"_index":343,"title":{},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":346,"title":{"injectables/UserService.html":{}},"body":{"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["uses",{"_index":814,"title":{},"body":{"components/LoginComponent.html":{}}}],["using",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/IssueComponent.html":{},"components/NewIssueComponent.html":{}}}],["validates",{"_index":612,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["validation",{"_index":649,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["validators",{"_index":664,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["validators.required",{"_index":674,"title":{},"body":{"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{}}}],["value",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"interfaces/Priority.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["variable",{"_index":215,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"coverage.html":{}}}],["variables",{"_index":1002,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":961,"title":{},"body":{"index.html":{}}}],["via",{"_index":986,"title":{},"body":{"index.html":{}}}],["view",{"_index":566,"title":{},"body":{"components/IssueComponent.html":{}}}],["void",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"components/AssignedToMeComponent.html":{},"injectables/AuthService.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{},"components/DashboardComponent.html":{},"interceptors/FakeBackendInterceptor.html":{},"components/IssueComponent.html":{},"components/LoginComponent.html":{},"components/NewIssueComponent.html":{},"components/OptionsComponent.html":{}}}],["want",{"_index":217,"title":{},"body":{"components/AssignedToMeComponent.html":{},"components/ClosedIssuesComponent.html":{},"components/CreatedByMeComponent.html":{}}}],["way",{"_index":785,"title":{},"body":{"interceptors/JwtInterceptor.html":{}}}],["welcome",{"_index":99,"title":{},"body":{"components/AppComponent.html":{}}}],["work",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["workflow",{"_index":878,"title":{},"body":{"components/OptionsComponent.html":{}}}],["yes",{"_index":758,"title":{},"body":{"injectables/IssueService.html":{}}}],["you're",{"_index":486,"title":{},"body":{"interceptors/FakeBackendInterceptor.html":{}}}],["zone.js",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        The main component\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n    \n        Example\n    \n    \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser\n                            \n                            \n                                navbarOpen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logout\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleNavbar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:39\n                \n            \n\n\n            \n                \n                    Logs out the user using the AuthService and navigates to the LoginComponent\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleNavbar\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleNavbar()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:47\n                \n            \n\n\n            \n                \n                    Part of the responsive UI system, responsible for showing and hiding the navbar on smaller devices\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:23\n                            \n                        \n\n                \n                    \n                        Represents the currently logged in user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            navbarOpen\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:28\n                            \n                        \n\n                \n                    \n                        Part of the responsive UI system, shows if the navbar is open or closed\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport * as _ from 'lodash';\nimport { Observable } from 'rxjs';\nimport { User } from './models/user.type';\nimport { AuthService } from './services/auth.service';\n\n/**\n * The main component\n *\n * @class AppComponent\n * @implements {OnInit}\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  /**\n   * Represents the currently logged in user\n   */\n  currentUser: User;\n  \n  /**\n   * Part of the responsive UI system, shows if the navbar is open or closed\n   */\n  navbarOpen = false;\n\n  constructor(private router: Router, private authService: AuthService) { }\n\n  ngOnInit() { \n    this.authService.currentUser.subscribe(u => this.currentUser = u);\n  }\n\n  /**\n   * Logs out the user using the {@link AuthService} and navigates to the {@link LoginComponent}\n   */\n  logout(){\n    this.authService.logout();\n    this.router.navigate([\"/login\"]);\n  }\n\n  /**\n   * Part of the responsive UI system, responsible for showing and hiding the navbar on smaller devices\n   */\n  toggleNavbar(){\n    this.navbarOpen = !this.navbarOpen;\n  }\n}\n\n    \n\n    \n        \n    \n        \n    \n    \n        \n            \n                Dashboard\n            \n            \n                New Issue\n            \n            \n                Options\n            \n        \n        \n            \n                \n                    Welcome, {{currentUser.username}}!\n                \n                \n                    Logout\n                \n            \n        \n    \n\n\n    \n        \n    \n\n    \n\n    \n                \n                    ./app.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                        Dashboard                                        New Issue                                        Options                                                                            Welcome, {{currentUser.username}}!                                                    Logout                                                        '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AssignedToMeComponent', 'selector': 'app-assigned-to-me'},{'name': 'ClosedIssuesComponent', 'selector': 'app-closed-issues'},{'name': 'CreatedByMeComponent', 'selector': 'app-created-by-me'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'IssueComponent', 'selector': 'app-issue'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NewIssueComponent', 'selector': 'app-new-issue'},{'name': 'OptionsComponent', 'selector': 'app-options'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAssignedToMeComponent\n\nAssignedToMeComponent\n\nAppModule -->\n\nAssignedToMeComponent->AppModule\n\n\n\n\n\nClosedIssuesComponent\n\nClosedIssuesComponent\n\nAppModule -->\n\nClosedIssuesComponent->AppModule\n\n\n\n\n\nCreatedByMeComponent\n\nCreatedByMeComponent\n\nAppModule -->\n\nCreatedByMeComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nIssueComponent\n\nIssueComponent\n\nAppModule -->\n\nIssueComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nNewIssueComponent\n\nNewIssueComponent\n\nAppModule -->\n\nNewIssueComponent->AppModule\n\n\n\n\n\nOptionsComponent\n\nOptionsComponent\n\nAppModule -->\n\nOptionsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            AssignedToMeComponent\n                        \n                        \n                            ClosedIssuesComponent\n                        \n                        \n                            CreatedByMeComponent\n                        \n                        \n                            DashboardComponent\n                        \n                        \n                            IssueComponent\n                        \n                        \n                            LoginComponent\n                        \n                        \n                            NewIssueComponent\n                        \n                        \n                            OptionsComponent\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule, Route, Routes } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\n\nimport { jwtInterceptorProvider } from './helpers/jwt.interceptor';\nimport { errorInterceptorProvider } from './helpers/error.interceptor';\nimport { AuthGuard } from \"./guards/auth.guard\";\n\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { NewIssueComponent } from './new-issue/new-issue.component';\nimport { OptionsComponent } from './options/options.component';\nimport { IssueComponent } from './issue/issue.component';\nimport { LoginComponent } from './login/login.component';\nimport { AssignedToMeComponent } from './dashboard/assigned-to-me/assigned-to-me.component';\nimport { CreatedByMeComponent } from './dashboard/created-by-me/created-by-me.component';\nimport { ClosedIssuesComponent } from './dashboard/closed-issues/closed-issues.component';\n\nconst routes: Routes = [\n  { path: \"\", component: DashboardComponent, canActivate: [AuthGuard] },\n  { path: \"newissue\", component: NewIssueComponent, canActivate: [AuthGuard] },\n  { path: \"options\", component: OptionsComponent, canActivate: [AuthGuard] },\n  { path: \"issue/:id\", component: IssueComponent, canActivate: [AuthGuard] },\n  { path: \"login\", component: LoginComponent },\n  { path: \"**\", redirectTo: \"\" }\n];\n\n/**\n * \n * The bootstrapper module\n *\n * @class AppModule\n */\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    NewIssueComponent,\n    OptionsComponent,\n    IssueComponent,\n    LoginComponent,\n    AssignedToMeComponent,\n    CreatedByMeComponent,\n    ClosedIssuesComponent\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(routes),\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BsDropdownModule.forRoot()\n  ],\n  providers: [\n    jwtInterceptorProvider,\n    //errorInterceptorProvider\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AssignedToMeComponent.html":{"url":"components/AssignedToMeComponent.html","title":"component - AssignedToMeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AssignedToMeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/assigned-to-me/assigned-to-me.component.ts\n\n\n    \n        Description\n    \n    \n        Displays issues that were assigned to the user currently logged in\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-assigned-to-me\n            \n\n            \n                styleUrls\n                ./assigned-to-me.component.css\n            \n\n\n\n            \n                templateUrl\n                ./assigned-to-me.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                issues\n                            \n                            \n                                statuses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIssues\n                            \n                            \n                                getStatuses\n                            \n                            \n                                getStatusName\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(issueService: IssueService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/assigned-to-me/assigned-to-me.component.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issueService\n                                                  \n                                                        \n                                                                        IssueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssues\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssues()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/assigned-to-me/assigned-to-me.component.ts:38\n                \n            \n\n\n            \n                \n                    Retrieves the issues assigned to the user using the IssueService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatuses\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatuses()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/assigned-to-me/assigned-to-me.component.ts:47\n                \n            \n\n\n            \n                \n                    Retrieves all the statuses using the IssueService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatusName\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatusName(statusId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/assigned-to-me/assigned-to-me.component.ts:57\n                \n            \n\n\n            \n                \n                    Retrieves the name of the given status ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    statusId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The status ID to look for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The status name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/assigned-to-me/assigned-to-me.component.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            issues\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/assigned-to-me/assigned-to-me.component.ts:21\n                            \n                        \n\n                \n                    \n                        Variable for storing the issues that we want to display on the component UI\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statuses\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/assigned-to-me/assigned-to-me.component.ts:26\n                            \n                        \n\n                \n                    \n                        Stores the possible issue statuses, so the status names can be easily retrieved\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Issue } from 'src/app/models/issue.type';\nimport { IssueService } from 'src/app/services/issue.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Status } from 'src/app/models/status.type';\nimport * as _ from 'lodash';\n\n/**\n * Displays issues that were assigned to the user currently logged in\n */\n@Component({\n  selector: 'app-assigned-to-me',\n  templateUrl: './assigned-to-me.component.html',\n  styleUrls: ['./assigned-to-me.component.css']\n})\nexport class AssignedToMeComponent implements OnInit {\n  /**\n   * Variable for storing the issues that we want to display on the component UI\n   */\n  issues: Observable;\n\n  /**\n   * Stores the possible issue statuses, so the status names can be easily retrieved\n   */\n  statuses: Status[];\n\n  constructor(private issueService: IssueService, private authService: AuthService) { }\n\n  ngOnInit() {\n    this.getIssues();\n    this.getStatuses();\n  }\n\n  /**\n   * Retrieves the issues assigned to the user using the {@link IssueService}\n   */\n  getIssues() {\n    let userId = this.authService.currentUserValue.id;\n\n    this.issues = this.issueService.getIssuesByAsignee(userId);\n  }\n\n  /**\n   * Retrieves all the statuses using the {@link IssueService}\n   */\n  getStatuses() {\n    this.issueService.getIssueStatuses().subscribe(s => this.statuses = s);\n  }\n\n  /**\n   * Retrieves the name of the given status ID\n   *\n   * @param {number} statusId The status ID to look for\n   * @returns {string} The status name\n   */\n  getStatusName(statusId: number): string {\n    let status = _.find(this.statuses, s => s.id === statusId);\n    return status && status.name;\n  }\n}\n\n    \n\n    \n        \n  Assigned To Me\n  \n    \n       0\">\n        \n          #\n          Title\n          Status\n        \n      \n      \n        \n          {{i+1}}\n          {{issue.title}}\n          {{getStatusName(issue.statusId)}}\n        \n        \n          No issues\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./assigned-to-me.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Assigned To Me             0\">                  #          Title          Status                                      {{i+1}}          {{issue.title}}          {{getStatusName(issue.statusId)}}                          No issues                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AssignedToMeComponent', 'selector': 'app-assigned-to-me'},{'name': 'ClosedIssuesComponent', 'selector': 'app-closed-issues'},{'name': 'CreatedByMeComponent', 'selector': 'app-created-by-me'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'IssueComponent', 'selector': 'app-issue'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NewIssueComponent', 'selector': 'app-new-issue'},{'name': 'OptionsComponent', 'selector': 'app-options'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AssignedToMeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/guards/auth.guard.ts\n            \n\n                \n                Description\n                \n                \n                    The authentication guard, which is responsible for shutting out unauthorized requests to the application\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/guards/auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/app/guards/auth.guard.ts:21\n                \n            \n\n\n            \n                \n                    Reuturns a boolean value, which shows if the requested page can be displayed or not.\nAlso navigates to the login page if it catches an unauthorized request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, CanActivate } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * The authentication guard, which is responsible for shutting out unauthorized requests to the application\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthGuard implements CanActivate {\n    constructor(private router: Router, private authService: AuthService){}\n\n    /**\n     * Reuturns a boolean value, which shows if the requested page can be displayed or not.\n     * Also navigates to the login page if it catches an unauthorized request\n     *\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     */\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        const currentUser = this.authService.currentUserValue;\n        \n        if(currentUser){\n            // all good, logged in\n            return true;\n        }\n\n        this.router.navigate([\"/login\"], {queryParams: {returnUrl: state.url}});\n        return false;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                A service to execute the authentication related tasks and communication with the API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUser\n                            \n                            \n                                    Private\n                                currentUserSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentUserValue\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            Tries to set the current user by retrieving it from the session storage\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/auth.service.ts:47\n                \n            \n\n\n            \n                \n                    Executes a POST request to authenticate the given credentials.\nIf the process is successful it saves the current user to the session storage\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/auth.service.ts:61\n                \n            \n\n\n            \n                \n                    Logs out the current user by removing it from the session storage\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                        The currently logged in user as an Observable\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentUserSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/services/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                        A private subject that represents the currently logged in user\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentUserValue\n                    \n                \n\n                \n                    \n                        getcurrentUserValue()\n                    \n                \n                            \n                                \n                                    Defined in src/app/services/auth.service.ts:36\n                                \n                            \n                    \n                        \n                                Get the current logged in user\n\n\n                                \n                                    Returns :         User\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { User } from '../models/user.type';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\n/**\n * A service to execute the authentication related tasks and communication with the API\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthService {\n    /**\n     * A private subject that represents the currently logged in user\n     */\n    private currentUserSubject: BehaviorSubject;\n\n    /**\n     * The currently logged in user as an Observable\n     */\n    currentUser: Observable;\n\n    /**\n     * Tries to set the current user by retrieving it from the session storage\n     */\n    constructor(private http: HttpClient){\n        this.currentUserSubject = new BehaviorSubject(JSON.parse(sessionStorage.getItem(\"currentUser\")));\n        this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    /**\n     * Get the current logged in user\n     */\n    get currentUserValue(): User {\n        return this.currentUserSubject.value;\n    }\n\n    /**\n     * Executes a POST request to authenticate the given credentials.\n     * If the process is successful it saves the current user to the session storage\n     *\n     * @param {string} username\n     * @param {string} password\n     */\n    login(username: string, password: string){\n        return this.http.post(environment.apiUrl_REAL + \"/api/users/authenticate\", {username, password}).pipe(map(user => {\n            if(user && user.token){\n                sessionStorage.setItem(\"currentUser\", JSON.stringify(user));\n                this.currentUserSubject.next(user);\n            }\n\n            return user;\n        }));\n    }\n\n    /**\n     * Logs out the current user by removing it from the session storage\n     */\n    logout(){\n        sessionStorage.removeItem(\"currentUser\");\n        this.currentUserSubject.next(null);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Category.html":{"url":"interfaces/Category.html","title":"interface - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/category.type.ts\n        \n\n            \n                Description\n            \n            \n                The Category interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Category {\n    id: number,\n    name: string\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ClosedIssuesComponent.html":{"url":"components/ClosedIssuesComponent.html","title":"component - ClosedIssuesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ClosedIssuesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/closed-issues/closed-issues.component.ts\n\n\n    \n        Description\n    \n    \n        Displays issues that are closed now and were created by the user or assigned to them\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-closed-issues\n            \n\n            \n                styleUrls\n                ./closed-issues.component.css\n            \n\n\n\n            \n                templateUrl\n                ./closed-issues.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                issues\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIssues\n                            \n                            \n                                getUserName\n                            \n                            \n                                getUsers\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(issueService: IssueService, authService: AuthService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/closed-issues/closed-issues.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issueService\n                                                  \n                                                        \n                                                                        IssueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssues\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssues()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/closed-issues/closed-issues.component.ts:39\n                \n            \n\n\n            \n                \n                    Retrieves the closed issues that were created by the user or assigned to them using the IssueService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserName\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserName(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/closed-issues/closed-issues.component.ts:59\n                \n            \n\n\n            \n                \n                    Retrieves the username of the given user ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user ID to look for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The username\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/closed-issues/closed-issues.component.ts:49\n                \n            \n\n\n            \n                \n                    Retrieves all the users using the UserService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/closed-issues/closed-issues.component.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            issues\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/closed-issues/closed-issues.component.ts:22\n                            \n                        \n\n                \n                    \n                        Variable for storing the issues that we want to display on the component UI\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/closed-issues/closed-issues.component.ts:27\n                            \n                        \n\n                \n                    \n                        Stores the users, so the user names can be easily retrieved\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Issue } from 'src/app/models/issue.type';\nimport { IssueService } from 'src/app/services/issue.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\nimport * as _ from 'lodash';\nimport { User } from 'src/app/models/user.type';\n\n/**\n * Displays issues that are closed now and were created by the user or assigned to them\n */\n@Component({\n  selector: 'app-closed-issues',\n  templateUrl: './closed-issues.component.html',\n  styleUrls: ['./closed-issues.component.css']\n})\nexport class ClosedIssuesComponent implements OnInit {\n  /**\n   * Variable for storing the issues that we want to display on the component UI\n   */\n  issues: Observable;\n\n  /**\n   * Stores the users, so the user names can be easily retrieved\n   */\n  users: User[];\n\n  constructor(private issueService: IssueService, private authService: AuthService, private userService: UserService) { }\n\n  ngOnInit() {\n    this.getIssues();\n    this.getUsers();\n  }\n\n  /**\n   * Retrieves the closed issues that were created by the user or assigned to them using the {@link IssueService}\n   */\n  getIssues() {\n    let userId = this.authService.currentUserValue.id;\n    let closedStatusId = 4;\n\n    this.issues = this.issueService.getIssuesByStatus({ userId: userId, statusId: closedStatusId });\n  }\n\n  /**\n   * Retrieves all the users using the {@link UserService}\n   */\n  getUsers() {\n    this.userService.getAll().subscribe(u => this.users = u);\n  }\n\n  /**\n   * Retrieves the username of the given user ID\n   *\n   * @param {number} userId The user ID to look for\n   * @returns {string} The username\n   */\n  getUserName(userId: number): string {\n    let user = _.find(this.users, u => u.id === userId);\n    return user && user.username;\n  }\n}\n\n    \n\n    \n        \n  Closed Issues\n  \n    \n       0\">\n        \n          #\n          Title\n          Assignee\n        \n      \n      \n        \n          {{i+1}}\n          {{issue.title}}\n          {{getUserName(issue.assignedToId)}}\n        \n        \n          No issues\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./closed-issues.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Closed Issues             0\">                  #          Title          Assignee                                      {{i+1}}          {{issue.title}}          {{getUserName(issue.assignedToId)}}                          No issues                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AssignedToMeComponent', 'selector': 'app-assigned-to-me'},{'name': 'ClosedIssuesComponent', 'selector': 'app-closed-issues'},{'name': 'CreatedByMeComponent', 'selector': 'app-created-by-me'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'IssueComponent', 'selector': 'app-issue'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NewIssueComponent', 'selector': 'app-new-issue'},{'name': 'OptionsComponent', 'selector': 'app-options'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ClosedIssuesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreatedByMeComponent.html":{"url":"components/CreatedByMeComponent.html","title":"component - CreatedByMeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  CreatedByMeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/created-by-me/created-by-me.component.ts\n\n\n    \n        Description\n    \n    \n        Display issues that were created by the user currently logged in\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-created-by-me\n            \n\n            \n                styleUrls\n                ./created-by-me.component.css\n            \n\n\n\n            \n                templateUrl\n                ./created-by-me.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                issues\n                            \n                            \n                                statuses\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getIssues\n                            \n                            \n                                getStatuses\n                            \n                            \n                                getStatusName\n                            \n                            \n                                getUserName\n                            \n                            \n                                getUsers\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(issueService: IssueService, authService: AuthService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issueService\n                                                  \n                                                        \n                                                                        IssueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssues\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssues()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:46\n                \n            \n\n\n            \n                \n                    Retrieves the issues created by the user using the IssueService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatuses\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatuses()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:55\n                \n            \n\n\n            \n                \n                    Retrieves all the statuses using the IssueService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatusName\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatusName(statusId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:65\n                \n            \n\n\n            \n                \n                    Retrieves the name of the given status ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    statusId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The status ID to look for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The status name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserName\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserName(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:83\n                \n            \n\n\n            \n                \n                    Retrieves the username of the given user ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user ID to look for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The username\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:73\n                \n            \n\n\n            \n                \n                    Retrieves all the users using the UserService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            issues\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:23\n                            \n                        \n\n                \n                    \n                        Variable for storing the issues that we want to display on the component UI\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statuses\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:28\n                            \n                        \n\n                \n                    \n                        Stores the possible issue statuses, so the status names can be easily retrieved\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/dashboard/created-by-me/created-by-me.component.ts:33\n                            \n                        \n\n                \n                    \n                        Stores the users, so the user names can be easily retrieved\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Issue } from 'src/app/models/issue.type';\nimport { IssueService } from 'src/app/services/issue.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Status } from 'src/app/models/status.type';\nimport * as _ from 'lodash';\nimport { User } from 'src/app/models/user.type';\nimport { UserService } from 'src/app/services/user.service';\n\n/**\n * Display issues that were created by the user currently logged in\n */\n@Component({\n  selector: 'app-created-by-me',\n  templateUrl: './created-by-me.component.html',\n  styleUrls: ['./created-by-me.component.css']\n})\nexport class CreatedByMeComponent implements OnInit {\n  /**\n   * Variable for storing the issues that we want to display on the component UI\n   */\n  issues: Observable;\n\n  /**\n   * Stores the possible issue statuses, so the status names can be easily retrieved\n   */\n  statuses: Status[];\n\n  /**\n   * Stores the users, so the user names can be easily retrieved\n   */\n  users: User[];\n\n  constructor(private issueService: IssueService, private authService: AuthService, private userService: UserService) { }\n\n  ngOnInit() {\n    this.getIssues();\n    this.getStatuses();\n    this.getUsers();\n  }\n\n  /**\n   * Retrieves the issues created by the user using the {@link IssueService}\n   */\n  getIssues() {\n    let userId = this.authService.currentUserValue.id;\n\n    this.issues = this.issueService.getIssuesByCreator(userId);\n  }\n\n  /**\n   * Retrieves all the statuses using the {@link IssueService}\n   */\n  getStatuses() {\n    this.issueService.getIssueStatuses().subscribe(s => this.statuses = s);\n  }\n\n  /**\n   * Retrieves the name of the given status ID\n   *\n   * @param {number} statusId The status ID to look for\n   * @returns {string} The status name\n   */\n  getStatusName(statusId: number): string {\n    let status = _.find(this.statuses, s => s.id === statusId);\n    return status && status.name;\n  }\n\n  /**\n   * Retrieves all the users using the {@link UserService}\n   */\n  getUsers() {\n    this.userService.getAll().subscribe(u => this.users = u);\n  }\n\n  /**\n   * Retrieves the username of the given user ID\n   *\n   * @param {number} userId The user ID to look for\n   * @returns {string} The username\n   */\n  getUserName(userId: number): string {\n    let user = _.find(this.users, u => u.id === userId);\n    return user && user.username;\n  }\n\n}\n\n    \n\n    \n        \n  Created By Me\n  \n    \n       0\">\n        \n          #\n          Title\n          Status\n          Assignee\n        \n      \n      \n        \n          {{i+1}}\n          {{issue.title}}\n          {{getStatusName(issue.statusId)}}\n          {{getUserName(issue.assignedToId)}}\n        \n        \n          No issues\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./created-by-me.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Created By Me             0\">                  #          Title          Status          Assignee                                      {{i+1}}          {{issue.title}}          {{getStatusName(issue.statusId)}}          {{getUserName(issue.assignedToId)}}                          No issues                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AssignedToMeComponent', 'selector': 'app-assigned-to-me'},{'name': 'ClosedIssuesComponent', 'selector': 'app-closed-issues'},{'name': 'CreatedByMeComponent', 'selector': 'app-created-by-me'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'IssueComponent', 'selector': 'app-issue'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NewIssueComponent', 'selector': 'app-new-issue'},{'name': 'OptionsComponent', 'selector': 'app-options'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CreatedByMeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DashboardComponent.html":{"url":"components/DashboardComponent.html","title":"component - DashboardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  DashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dashboard/dashboard.component.ts\n\n\n    \n        Description\n    \n    \n        The landing page after login, holds several sub-components: AssignedToMeComponent, CreatedByMeComponent, ClosedIssuesComponent\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dashboard\n            \n\n            \n                styleUrls\n                ./dashboard.component.css\n            \n\n\n\n            \n                templateUrl\n                ./dashboard.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/dashboard/dashboard.component.ts:15\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dashboard/dashboard.component.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Issue } from '../models/issue.type';\nimport { IssueService } from '../services/issue.service';\n\n/**\n * The landing page after login, holds several sub-components: {@link AssignedToMeComponent}, {@link CreatedByMeComponent}, {@link ClosedIssuesComponent}\n */\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  \n  constructor() { }\n\n  ngOnInit() { }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n      \n    \n  \n  \n    \n      \n        \n      \n    \n    \n      \n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./dashboard.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AssignedToMeComponent', 'selector': 'app-assigned-to-me'},{'name': 'ClosedIssuesComponent', 'selector': 'app-closed-issues'},{'name': 'CreatedByMeComponent', 'selector': 'app-created-by-me'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'IssueComponent', 'selector': 'app-issue'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NewIssueComponent', 'selector': 'app-new-issue'},{'name': 'OptionsComponent', 'selector': 'app-options'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DashboardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/ErrorInterceptor.html":{"url":"interceptors/ErrorInterceptor.html","title":"interceptor - ErrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  ErrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/helpers/error.interceptor.ts\n        \n\n            \n                Description\n            \n            \n                NOT USED CURRENTLY\n\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/helpers/error.interceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/helpers/error.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * NOT USED CURRENTLY\n */\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(private authService: AuthService) { }\n\n    intercept(req: HttpRequest, next: HttpHandler): Observable> {\n        return next.handle(req).pipe(catchError(err => {\n            if (err.status === 401) {\n                this.authService.logout();\n                location.reload(true);\n            }\n\n            const error = err.message || err.statusText || err.error;\n            return throwError(error);\n        }));\n    }\n}\n\nexport let errorInterceptorProvider = {\n    provide: HTTP_INTERCEPTORS,\n    useClass: ErrorInterceptor,\n    multi: true\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/FakeBackendInterceptor.html":{"url":"interceptors/FakeBackendInterceptor.html","title":"interceptor - FakeBackendInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  FakeBackendInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/helpers/fake-backend.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fakeDb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                load\n                            \n                            \n                                    Private\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/helpers/fake-backend.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/helpers/fake-backend.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            load\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    load()\n                \n            \n\n\n            \n                \n                    Defined in src/app/helpers/fake-backend.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save()\n                \n            \n\n\n            \n                \n                    Defined in src/app/helpers/fake-backend.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeDb\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/helpers/fake-backend.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { User } from '../models/user.type';\nimport { mergeMap, materialize, dematerialize, delay } from 'rxjs/operators';\nimport { Issue } from '../models/issue.type';\nimport { FakeDb } from './fake-db';\nimport * as _ from 'lodash';\nimport { Note } from '../models/note.type';\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    fakeDb: any;\n\n    constructor() {\n        // localStorage.clear();\n        this.load();\n    }\n\n    private load() {\n        this.fakeDb = JSON.parse(localStorage.getItem('fakeDb')) || FakeDb;\n        this.save();\n    }\n\n    private save() {\n        localStorage.setItem(\"fakeDb\", JSON.stringify(this.fakeDb));\n        return of(delay(200));\n    }\n\n    intercept(req: HttpRequest, next: HttpHandler): Observable> {\n        // const authHeader = req.headers.get(\"Authorization\");\n        // const isLoggedIn = authHeader && authHeader.startsWith(\"Bearer fake-jwt-token\");\n        const isLoggedIn = true;\n\n        return of(null).pipe(mergeMap(() => {\n            console.log(req.url);\n\n            // if (req.url.endsWith(\"/users/auth\") && req.method === \"POST\") {\n            //     const user = this.fakeDb.Users.find(u => u.username === req.body.username && u.password === req.body.password);\n\n            //     if (!user) {\n            //         return error('Username or password is incorrect');\n            //     }\n\n            //     return ok({\n            //         id: user.id,\n            //         email: user.email,\n            //         username: user.username,\n            //         firstName: user.firstName,\n            //         lastName: user.lastName,\n            //         userLevelId: user.userLevelId,\n            //         token: \"fake-jwt-token\"\n            //     });\n            // }\n\n            // if (req.url.endsWith(\"/issues/update/\") && req.method === \"POST\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     let issue: Issue = req.body.issue;\n            //     let updateSuccess = false;\n\n            //     if (issue.id > 0) {\n            //         // update existing issue\n            //         for (let i = 0; i  i.id);\n            //         issue.id = ((maxIssue && maxIssue.id) || 0) + 1;\n\n            //         this.fakeDb.Issues.push(issue);\n            //         updateSuccess = true;\n            //         this.save();\n            //     }\n\n            //     if (!updateSuccess) {\n            //         return error(\"The issue you're trying to update doesn't exist\");\n            //     }\n\n            //     return ok(issue);\n            // }\n\n            // if (req.url.endsWith(\"/notes/add/\") && req.method === \"POST\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     let note: Note = req.body.note;\n            //     let issue: Issue = _.find(this.fakeDb.Issues, i => i.id === note.issueId);\n\n            //     if (!issue) {\n            //         return error(\"The issue you're trying to update doesn't exist\");\n            //     }\n\n            //     for (let i = 0; i  n.id);\n            //     note.id = ((maxNote && maxNote.id) || 0) + 1;\n            //     this.fakeDb.Notes.push(note);\n            //     this.save();\n\n            //     return ok(note);\n            // }\n\n            // if (req.url.endsWith(\"/users\") && req.method === \"GET\") {\n            //     // TODO: to properly do this we need an error interceptor\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     let userResults = [];\n            //     this.fakeDb.Users.forEach(user => {\n            //         let userResult = {\n            //             id: user.id,\n            //             email: user.email,\n            //             username: user.username,\n            //             firstName: user.firstName,\n            //             lastName: user.lastName,\n            //             userLevelId: user.userLevelId\n            //         }\n\n            //         userResults.push(userResult);\n            //     });\n\n            //     return ok(userResults);\n            // }\n\n            // if (req.url.match(/\\/notes\\/issue\\/(\\d+)/) && req.method === \"GET\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     let urlParts = req.url.split('/');\n            //     let id = +urlParts[urlParts.length - 1];\n\n            //     return ok(_.orderBy(_.filter(this.fakeDb.Notes, n => n.issueId === id), ['id'], ['desc']));\n            // }\n\n            // if (req.url.endsWith(\"/issues\") && req.method === \"GET\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     return ok(this.fakeDb.Issues);\n            // }\n\n            // if (req.url.match(/\\/issue\\/\\d+/) && req.method === \"GET\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     let urlParts = req.url.split('/');\n            //     let id = parseInt(urlParts[urlParts.length - 1]);\n\n            //     return ok(_.find(this.fakeDb.Issues, i => i.id === id));\n            // }\n\n            // if (req.url.match(/\\/issues\\/assignedto\\/\\d+/) && req.method === \"GET\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     let urlParts = req.url.split('/');\n            //     let id = parseInt(urlParts[urlParts.length - 1]);\n\n            //     return ok(_.filter(this.fakeDb.Issues, i => i.assignedToId === id));\n            // }\n\n            // if (req.url.match(/\\/issues\\/createdby\\/\\d+/) && req.method === \"GET\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     let urlParts = req.url.split('/');\n            //     let id = parseInt(urlParts[urlParts.length - 1]);\n\n            //     return ok(_.filter(this.fakeDb.Issues, i => i.createdById === id));\n            // }\n\n            // if (req.url.match(/\\/issues\\/status\\/(\\d+)\\/user\\/(\\d+)/) && req.method === \"GET\") {\n\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     let urlParts = req.url.split('/');\n            //     let statusId = parseInt(urlParts[urlParts.length - 3]);\n            //     let userId = parseInt(urlParts[urlParts.length - 1]);\n\n            //     return ok(_.filter(this.fakeDb.Issues, i => i.statusId === statusId && (i.assignedToId === userId || i.createdById === userId)));\n            // }\n\n            // if (req.url.endsWith(\"/statuses/\") && req.method === \"GET\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     return ok(this.fakeDb.Statuses);\n            // }\n\n            // if (req.url.endsWith(\"/categories/\") && req.method === \"GET\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     return ok(this.fakeDb.Categories);\n            // }\n\n            // if (req.url.endsWith(\"/priorities/\") && req.method === \"GET\") {\n            //     if (!isLoggedIn) {\n            //         return unauthorized();\n            //     }\n\n            //     return ok(_.orderBy(this.fakeDb.Priorities, ['delay'], ['asc']));\n            // }\n\n            return next.handle(req);\n        }))\n            .pipe(materialize())\n            .pipe(delay(200))\n            .pipe(dematerialize());\n\n        function ok(body) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function unauthorized() {\n            return throwError({ status: 401, message: 'Unauthorized' });\n        }\n\n        function error(message) {\n            return throwError({ status: 400, message: message });\n        }\n    }\n}\n\nexport let fakeBackendProvider = {\n    // use fake backend in place of Http service for backend-less development\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Issue.html":{"url":"interfaces/Issue.html","title":"interface - Issue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Issue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/issue.type.ts\n        \n\n            \n                Description\n            \n            \n                The Issue interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        assignedToId\n                                \n                                \n                                        categoryId\n                                \n                                \n                                        createdById\n                                \n                                \n                                        createdOn\n                                \n                                \n                                        description\n                                \n                                \n                                        dueOn\n                                \n                                \n                                        id\n                                \n                                \n                                        priorityId\n                                \n                                \n                                        statusId\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        assignedToId\n                                    \n                                \n                                \n                                    \n                                        assignedToId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        categoryId\n                                    \n                                \n                                \n                                    \n                                        categoryId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdById\n                                    \n                                \n                                \n                                    \n                                        createdById:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdOn\n                                    \n                                \n                                \n                                    \n                                        createdOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dueOn\n                                    \n                                \n                                \n                                    \n                                        dueOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priorityId\n                                    \n                                \n                                \n                                    \n                                        priorityId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusId\n                                    \n                                \n                                \n                                    \n                                        statusId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Issue {\n    id: number,\n    createdOn: Date,\n    title: string,\n    description: string,\n    dueOn: Date,\n    assignedToId?: number,\n    createdById: number,\n    statusId: number,\n    categoryId: number,\n    priorityId: number\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IssueComponent.html":{"url":"components/IssueComponent.html","title":"component - IssueComponent","body":"\n                   \n\n\n\n\n\n  Components\n  IssueComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/issue/issue.component.ts\n\n\n    \n        Description\n    \n    \n        The issue detail component. Users can view and update an issue here\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-issue\n            \n\n            \n                styleUrls\n                ./issue.component.css\n            \n\n\n\n            \n                templateUrl\n                ./issue.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                categories\n                            \n                            \n                                issueError\n                            \n                            \n                                issueLoading\n                            \n                            \n                                notes\n                            \n                            \n                                priorities\n                            \n                            \n                                selectedIssue\n                            \n                            \n                                statuses\n                            \n                            \n                                statusNoteError\n                            \n                            \n                                statusNoteForm\n                            \n                            \n                                statusNoteLoading\n                            \n                            \n                                statusNoteSubmitted\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCategories\n                            \n                            \n                                getIssue\n                            \n                            \n                                getNotes\n                            \n                            \n                                getPriorities\n                            \n                            \n                                getStatuses\n                            \n                            \n                                getStatusName\n                            \n                            \n                                getUserName\n                            \n                            \n                                getUsers\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                OnSaveIssue\n                            \n                            \n                                OnStatusNoteSave\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    snf\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, issueService: IssueService, userService: UserService, formBuilder: FormBuilder, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/issue/issue.component.ts:85\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                        ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issueService\n                                                  \n                                                        \n                                                                        IssueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategories\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:137\n                \n            \n\n\n            \n                \n                    Retrieves the categories using the IssueService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssue\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssue(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNotes\n                        \n                        \n                    \n                \n            \n            \n                \ngetNotes(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:153\n                \n            \n\n\n            \n                \n                    Retrieves the status notes that belong to the selected issue using the IssueService\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPriorities\n                        \n                        \n                    \n                \n            \n            \n                \ngetPriorities()\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:146\n                \n            \n\n\n            \n                \n                    Retrieves the priorities using the IssueService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatuses\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatuses()\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:130\n                \n            \n\n\n            \n                \n                    Retrieves the statuses using the IssueService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatusName\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatusName(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:174\n                \n            \n\n\n            \n                \n                    Retrieves the name of the given status ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The status name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserName\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserName(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:163\n                \n            \n\n\n            \n                \n                    Retrieves the username of the given user ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The username\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:121\n                \n            \n\n\n            \n                \n                    Retrieves the users using the IssueService\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            OnSaveIssue\n                        \n                        \n                    \n                \n            \n            \n                \nOnSaveIssue()\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:182\n                \n            \n\n\n            \n                \n                    Executed when clicking on the Save button to update the selected issue's details. Validates the form and starts the saving process.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            OnStatusNoteSave\n                        \n                        \n                    \n                \n            \n            \n                \nOnStatusNoteSave()\n                \n            \n\n\n            \n                \n                    Defined in src/app/issue/issue.component.ts:204\n                \n            \n\n\n            \n                \n                    Executed when clicking on the Save button to add a new status note. Validates the form and starts the saving process. Also updates the UI in the end to display the newly added note.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            categories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:45\n                            \n                        \n\n                \n                    \n                        The categories that the issue can pick up\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            issueError\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:65\n                            \n                        \n\n                \n                    \n                        Stores the error messages coming from the IssueService\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            issueLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:60\n                            \n                        \n\n                \n                    \n                        Is true when the Save button was clicked to update the selected issue\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:55\n                            \n                        \n\n                \n                    \n                        The notes that were added to the selected issue\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            priorities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:50\n                            \n                        \n\n                \n                    \n                        The priorities the issue can be assigned to\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedIssue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Issue\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:30\n                            \n                        \n\n                \n                    \n                        The selected issue currently displayed on the page\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statuses\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:40\n                            \n                        \n\n                \n                    \n                        The statuses that the issue can be assigned to\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusNoteError\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:85\n                            \n                        \n\n                \n                    \n                        Stores the error messages coming from the IssueService after a failed status note creation\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusNoteForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:70\n                            \n                        \n\n                \n                    \n                        The Reactive Form object for adding a new status note to the issue\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusNoteLoading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:80\n                            \n                        \n\n                \n                    \n                        Is true when the Save button was clicked to add a new status note and the saving process started running\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusNoteSubmitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:75\n                            \n                        \n\n                \n                    \n                        Is true if the Save button was clicked to add a new status note, helps displaying client-side validation errors on the input fields\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/issue/issue.component.ts:35\n                            \n                        \n\n                \n                    \n                        The users that the issue can be assigned to\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        snf\n                    \n                \n\n                \n                    \n                        getsnf()\n                    \n                \n                            \n                                \n                                    Defined in src/app/issue/issue.component.ts:197\n                                \n                            \n                    \n                        \n                                Gets all the controls from the status note form\n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { Issue } from '../models/issue.type';\nimport { IssueService } from '../services/issue.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../models/user.type';\nimport * as _ from 'lodash';\nimport { Category } from '../models/category.type';\nimport { Priority } from '../models/priority.type';\nimport { Status } from '../models/status.type';\nimport { Note } from '../models/note.type';\nimport { map, first } from 'rxjs/operators';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * The issue detail component. Users can view and update an issue here\n */\n@Component({\n  selector: 'app-issue',\n  templateUrl: './issue.component.html',\n  styleUrls: ['./issue.component.css']\n})\nexport class IssueComponent implements OnInit {\n  /**\n   * The selected issue currently displayed on the page\n   */\n  selectedIssue: Issue;\n  \n  /**\n   * The users that the issue can be assigned to\n   */\n  users: User[];\n  \n  /**\n   * The statuses that the issue can be assigned to\n   */\n  statuses: Status[];\n\n  /**\n   * The categories that the issue can pick up\n   */\n  categories: Category[];\n\n  /**\n   * The priorities the issue can be assigned to\n   */\n  priorities: Observable;\n\n  /**\n   * The notes that were added to the selected issue\n   */\n  notes: Observable;\n\n  /**\n   * Is true when the Save button was clicked to update the selected issue\n   */\n  issueLoading = false;\n  \n  /**\n   * Stores the error messages coming from the {@link IssueService}\n   */\n  issueError = \"\";\n\n  /**\n   * The Reactive Form object for adding a new status note to the issue\n   */\n  statusNoteForm: FormGroup;\n\n  /**\n   * Is true if the Save button was clicked to add a new status note, helps displaying client-side validation errors on the input fields\n   */\n  statusNoteSubmitted = false;\n\n  /**\n   * Is true when the Save button was clicked to add a new status note and the saving process started running\n   */\n  statusNoteLoading = false;\n\n  /**\n   * Stores the error messages coming from the {@link IssueService} after a failed status note creation\n   */\n  statusNoteError = \"\";\n\n  constructor(private route: ActivatedRoute,\n    private issueService: IssueService,\n    private userService: UserService,\n    private formBuilder: FormBuilder,\n    private authService: AuthService) { }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      let issueId = +params['id'];\n      this.getIssue(issueId);\n      this.getNotes(issueId);\n    });\n\n    this.getUsers();\n    this.getStatuses();\n    this.getCategories();\n    this.getPriorities();\n\n    this.statusNoteForm = this.formBuilder.group({\n      status: [\"\", Validators.required],\n      notes: [\"\", Validators.required],\n    });\n  }\n\n  getIssue(id: number) {\n    this.issueService.getSingleIssue(id).subscribe(i => {\n      this.selectedIssue = i;\n      this.snf.status.setValue(this.selectedIssue.statusId);\n    });\n  }\n\n  /**\n   * Retrieves the users using the {@link IssueService}\n   */\n  getUsers() {\n    this.userService.getAll().subscribe(u => {\n      this.users = u;\n    });\n  }\n\n  /**\n   * Retrieves the statuses using the {@link IssueService}\n   */\n  getStatuses() {\n    this.issueService.getIssueStatuses().subscribe(s => this.statuses = s);\n  }\n\n  /**\n   * Retrieves the categories using the {@link IssueService}\n   */\n  getCategories() {\n    this.issueService.getIssueCategories().subscribe(c => {\n      this.categories = c;\n    });\n  }\n\n  /**\n   * Retrieves the priorities using the {@link IssueService}\n   */\n  getPriorities() {\n    this.priorities = this.issueService.getIssuePriorities();\n  }\n\n  /**\n   * Retrieves the status notes that belong to the selected issue using the {@link IssueService}\n   */\n  getNotes(id: number) {\n    this.notes = this.issueService.getIssueNotes(id);\n  }\n\n  /**\n   * Retrieves the username of the given user ID\n   *\n   * @param {number} userId The user ID to look for\n   * @returns {string} The username\n   */\n  getUserName(id: number): string {\n    let user = _.find(this.users, u => u.id === id);\n    return user && user.username;\n  }\n\n  /**\n   * Retrieves the name of the given status ID\n   *\n   * @param {number} statusId The status ID to look for\n   * @returns {string} The status name\n   */\n  getStatusName(id: number): string {\n    let status = _.find(this.statuses, s => s.id === id);\n    return status && status.name;\n  }\n\n  /**\n   * Executed when clicking on the Save button to update the selected issue's details. Validates the form and starts the saving process.\n   */\n  OnSaveIssue() {\n    this.issueError = \"\";\n    this.issueLoading = true;\n\n    this.issueService.addOrUpdateIssue(this.selectedIssue).pipe(first()).subscribe(data => {\n      this.issueLoading = false;\n    }, error => {\n      this.issueLoading = false;\n      this.issueError = error.error.message || error.error[0];\n    });\n  }\n\n  /**\n   * Gets all the controls from the status note form\n   */\n  get snf() {\n    return this.statusNoteForm.controls;\n  }\n\n  /**\n   * Executed when clicking on the Save button to add a new status note. Validates the form and starts the saving process. Also updates the UI in the end to display the newly added note.\n   */\n  OnStatusNoteSave() {\n    this.statusNoteSubmitted = true;\n\n    if (this.statusNoteForm.invalid) {\n      return;\n    }\n\n    this.statusNoteSubmitted = false;\n    this.statusNoteError = \"\";\n    this.statusNoteLoading = true;\n\n    let newNote: Note = {\n      issueId: this.selectedIssue.id,\n      userId: this.authService.currentUserValue.id,\n      statusId: +this.snf.status.value,\n      text: this.snf.notes.value\n    }\n\n    this.issueService.addStatusNote(newNote).pipe(first()).subscribe(data => {\n      this.statusNoteLoading = false;\n      this.getNotes(this.selectedIssue.id);\n      this.getIssue(this.selectedIssue.id);\n      this.statusNoteForm.reset();\n    }, error => {\n      this.statusNoteLoading = false;\n      this.statusNoteError = error.error.message || error.error[0];\n    });\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          {{selectedIssue.title}} - {{getStatusName(selectedIssue.statusId)}}\n          \n            \n              \n\n              \n                Assigned To\n                \n                  {{user.username}} ({{user.firstName}}\n                    {{user.lastName}})\n                \n              \n\n              \n                Category\n                \n                  {{category.name}}\n                  \n                \n              \n\n              \n                Priority\n                \n                  {{priority.name}}\n                  \n                \n              \n\n              \n                Due Date:\n                \n              \n\n              \n                Save\n                \n              \n              {{issueError}}\n            \n          \n        \n      \n    \n  \n  \n    \n      \n        \n          Set Status\n          \n            \n              \n                New Status:\n                \n                  \n                    {{status.name}}\n                \n                \n                  Status is required\n                \n              \n\n              \n                Notes:\n                \n                \n                  Notes are required\n                \n              \n\n              \n                Save\n                \n              \n              {{statusNoteError}}\n            \n          \n        \n      \n    \n  \n\n\n  \n    \n      Notes\n      \n        \n          \n            \n              {{getUserName(note.userId)}} - {{note.createdOn | date:'yyyy-MM-dd H:mm'}} -\n                {{getStatusName(note.statusId)}}\n              {{note.text}}\n            \n          \n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./issue.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                              {{selectedIssue.title}} - {{getStatusName(selectedIssue.statusId)}}                                                                  Assigned To                                  {{user.username}} ({{user.firstName}}                    {{user.lastName}})                                                            Category                                  {{category.name}}                                                                              Priority                                  {{priority.name}}                                                                              Due Date:                                                            Save                                            {{issueError}}                                                                        Set Status                                                    New Status:                                                      {{status.name}}                                                  Status is required                                                            Notes:                                                  Notes are required                                                            Save                                            {{statusNoteError}}                                                      Notes                                                  {{getUserName(note.userId)}} - {{note.createdOn | date:\\'yyyy-MM-dd H:mm\\'}} -                {{getStatusName(note.statusId)}}              {{note.text}}                                          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AssignedToMeComponent', 'selector': 'app-assigned-to-me'},{'name': 'ClosedIssuesComponent', 'selector': 'app-closed-issues'},{'name': 'CreatedByMeComponent', 'selector': 'app-created-by-me'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'IssueComponent', 'selector': 'app-issue'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NewIssueComponent', 'selector': 'app-new-issue'},{'name': 'OptionsComponent', 'selector': 'app-options'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'IssueComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssueService.html":{"url":"injectables/IssueService.html","title":"injectable - IssueService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  IssueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/issue.service.ts\n        \n\n            \n                Description\n            \n            \n                A service to communicate between the API and Issue, Status, Category, Priority and Note objects\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOrUpdateIssue\n                            \n                            \n                                addStatusNote\n                            \n                            \n                                getAllIssues\n                            \n                            \n                                getIssueCategories\n                            \n                            \n                                getIssueNotes\n                            \n                            \n                                getIssuePriorities\n                            \n                            \n                                getIssuesByAsignee\n                            \n                            \n                                getIssuesByCreator\n                            \n                            \n                                getIssuesByStatus\n                            \n                            \n                                getIssueStatuses\n                            \n                            \n                                getSingleIssue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/issue.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addOrUpdateIssue\n                        \n                        \n                    \n                \n            \n            \n                \naddOrUpdateIssue(issue: Issue)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:102\n                \n            \n\n\n            \n                \n                    A POST or PUT request to add or update a given issue. If the issue passed on in the params has an ID then it's an update, otherwise it's a creation.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    issue\n                                    \n                                                Issue\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The issue to save\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addStatusNote\n                        \n                        \n                    \n                \n            \n            \n                \naddStatusNote(note: Note)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:120\n                \n            \n\n\n            \n                \n                    A POST request to save a given note to the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    note\n                                    \n                                                Note\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The note to save\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllIssues\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllIssues()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:27\n                \n            \n\n\n            \n                \n                    Returns all the issues stored in the database\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssueCategories\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssueCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:77\n                \n            \n\n\n            \n                \n                    Returns all the categories stored in the database\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssueNotes\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssueNotes(issueId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:93\n                \n            \n\n\n            \n                \n                    Returns all the notes that were added to the given issue\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    issueId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The issue ID to look for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssuePriorities\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssuePriorities()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:84\n                \n            \n\n\n            \n                \n                    Returns all the priorities stored in the database\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssuesByAsignee\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssuesByAsignee(assignedToId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:45\n                \n            \n\n\n            \n                \n                    Returns all the issues assigned to the given user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    assignedToId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user ID to look for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssuesByCreator\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssuesByCreator(createdById: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:54\n                \n            \n\n\n            \n                \n                    Returns all the issues created by the given user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createdById\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The user ID to look for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssuesByStatus\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssuesByStatus(options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:63\n                \n            \n\n\n            \n                \n                    Returns all the issues with a given status and user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The status ID and user ID to look for  \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIssueStatuses\n                        \n                        \n                    \n                \n            \n            \n                \ngetIssueStatuses()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:70\n                \n            \n\n\n            \n                \n                    Returns all the statuses stored in the database\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSingleIssue\n                        \n                        \n                    \n                \n            \n            \n                \ngetSingleIssue(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/issue.service.ts:36\n                \n            \n\n\n            \n                \n                    Returns the details of a single issue\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The issue ID to look for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { from, timer, of, Observable } from \"rxjs\";\nimport { delay, map } from \"rxjs/operators\";\nimport * as _ from \"lodash\";\n\nimport { Issue } from \"../models/issue.type\";\nimport { Status } from '../models/status.type';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Category } from '../models/category.type';\nimport { Priority } from '../models/priority.type';\nimport { Note } from '../models/note.type';\n\n/**\n * A service to communicate between the API and {@link Issue}, {@link Status}, {@link Category}, {@link Priority} and {@link Note} objects\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class IssueService {\n\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Returns all the issues stored in the database\n     */\n    getAllIssues(): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/issues\");\n    }\n\n    /**\n     * Returns the details of a single issue\n     *\n     * @param {number} id   The issue ID to look for\n     */\n    getSingleIssue(id: number): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/issues/\" + id);\n    }\n\n    /**\n     * Returns all the issues assigned to the given user\n     * \n     * @param {number} assignedToId   The user ID to look for\n     */\n    getIssuesByAsignee(assignedToId: number): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/issues/assignedto/\" + assignedToId);\n    }\n\n    /**\n     * Returns all the issues created by the given user\n     *\n     * @param {number} createdById  The user ID to look for\n     */\n    getIssuesByCreator(createdById: number): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/issues/createdby/\" + createdById);\n    }\n\n    /**\n     * Returns all the issues with a given status and user\n     *\n     * @param {{ userId?: number, statusId?: number }} [options]    The status ID and user ID to look for  \n     */\n    getIssuesByStatus(options?: { userId?: number, statusId?: number }): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/issues/status/\" + options.statusId + \"/user/\" + options.userId);\n    }\n\n    /**\n     * Returns all the statuses stored in the database\n     */\n    getIssueStatuses(): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/statuses/\");\n    }\n\n    /**\n     * Returns all the categories stored in the database\n     */\n    getIssueCategories(): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/categories/\");\n    }\n\n    /**\n     * Returns all the priorities stored in the database\n     */\n    getIssuePriorities(): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/priorities/\");\n    }\n\n    /**\n     * Returns all the notes that were added to the given issue\n     *\n     * @param {number} issueId  The issue ID to look for\n     */\n    getIssueNotes(issueId: number): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/notes/issue/\" + issueId);\n    }\n\n    /**\n     * A POST or PUT request to add or update a given issue. If the issue passed on in the params has an ID then it's an update, otherwise it's a creation.\n     *\n     * @param {Issue} issue The issue to save\n     */\n    addOrUpdateIssue(issue: Issue): Observable {\n        if (issue.id) {\n            return this.http.put(environment.apiUrl_REAL + \"/api/issues/\", issue).pipe(map(issue => {\n                return issue;\n            }));\n        }\n        else {\n            return this.http.post(environment.apiUrl_REAL + \"/api/issues/\", issue).pipe(map(issue => {\n                return issue;\n            }));\n        }\n    }\n\n    /**\n     * A POST request to save a given note to the database\n     *\n     * @param {Note} note   The note to save\n     */\n    addStatusNote(note: Note): Observable {\n        return this.http.post(environment.apiUrl_REAL + \"/api/notes/\", note).pipe(map(note => {\n            return note;\n        }));\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/JwtInterceptor.html":{"url":"interceptors/JwtInterceptor.html","title":"interceptor - JwtInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  JwtInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/helpers/jwt.interceptor.ts\n        \n\n            \n                Description\n            \n            \n                An HttpInterceptor to always add the auth token to the request header\nThis way we can easily use the API's functions\n\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/helpers/jwt.interceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/app/helpers/jwt.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * An HttpInterceptor to always add the auth token to the request header\n * This way we can easily use the API's functions\n */\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private authService: AuthService){}\n\n    intercept(req: HttpRequest, next: HttpHandler): Observable> {\n        let currentUser = this.authService.currentUserValue;\n\n        if(currentUser && currentUser.token) {\n            req = req.clone({\n                setHeaders: {\n                    Authorization: 'Bearer ' + currentUser.token\n                }\n            });\n        }\n        \n        return next.handle(req);\n    }\n\n}\n\nexport let jwtInterceptorProvider = {\n    provide: HTTP_INTERCEPTORS,\n    useClass: JwtInterceptor,\n    multi: true\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/login.component.ts\n\n\n    \n        Description\n    \n    \n        The Login component\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n    \n        Example\n    \n    \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                styleUrls\n                ./login.component.css\n            \n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                loading\n                            \n                            \n                                loginForm\n                            \n                            \n                                returnUrl\n                            \n                            \n                                submitted\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                OnSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    f\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, route: ActivatedRoute, router: Router, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/login.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                        ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/login/login.component.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            OnSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nOnSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/login/login.component.ts:67\n                \n            \n\n\n            \n                \n                    Executed when clicking on the Login button.\nValidates the login form and calls the AuthService to authenticate the credentials entered into the form\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:41\n                            \n                        \n\n                \n                    \n                        The error messages coming from the AuthService are stored here\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:26\n                            \n                        \n\n                \n                    \n                        Is true if the Login button was clicked and the authentication process started running\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loginForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:21\n                            \n                        \n\n                \n                    \n                        The Reactive Form object\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            returnUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:36\n                            \n                        \n\n                \n                    \n                        Stores the URL of the originating page, the component uses this value to navigate the user to the right page after successful authentication\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/login/login.component.ts:31\n                            \n                        \n\n                \n                    \n                        Is true if the Login button was clicked, helps displaying client-side validation errors on the input fields\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        f\n                    \n                \n\n                \n                    \n                        getf()\n                    \n                \n                            \n                                \n                                    Defined in src/app/login/login.component.ts:59\n                                \n                            \n                    \n                        \n                                Gets all the controls from the login form\n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { first } from 'rxjs/operators';\n\n/**\n * The Login component\n * \n * @class LoginComponent\n */\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  /**\n   * The Reactive Form object\n   */\n  loginForm: FormGroup;\n \n  /**\n   * Is true if the Login button was clicked and the authentication process started running\n   */\n  loading = false;\n  \n  /**\n   * Is true if the Login button was clicked, helps displaying client-side validation errors on the input fields\n   */\n  submitted = false;\n\n  /**\n   * Stores the URL of the originating page, the component uses this value to navigate the user to the right page after successful authentication\n   */\n  returnUrl: string;\n  \n  /**\n   * The error messages coming from the {@link AuthService} are stored here\n   */\n  error = \"\";\n\n  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, private authService: AuthService) { }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      username: [\"\", Validators.required],\n      password: [\"\", Validators.required]\n    });\n\n    this.authService.logout();\n\n    this.returnUrl = this.route.snapshot.queryParams[\"returnUrl\"] || \"/\";\n  }\n\n  /**\n   * Gets all the controls from the login form\n   */\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  /**\n   * Executed when clicking on the Login button.\n   * Validates the login form and calls the {@link AuthService} to authenticate the credentials entered into the form\n   */\n  OnSubmit() {\n    this.submitted = true;\n\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.error = \"\";\n    this.loading = true;\n\n    this.authService.login(this.f.username.value, this.f.password.value).pipe(first()).subscribe(data => {\n      this.router.navigate([this.returnUrl])\n    }, err => {\n      this.error = err.error;\n      this.loading = false;\n    });\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      Login\n      \n        \n          \n            Username\n            \n            \n              Username is required\n            \n          \n          \n            Password\n            \n            \n              Password is required\n            \n          \n          \n            Login\n            \n          \n          {{error}}\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./login.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Login                                    Username                                      Username is required                                            Password                                      Password is required                                            Login                                {{error}}                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AssignedToMeComponent', 'selector': 'app-assigned-to-me'},{'name': 'ClosedIssuesComponent', 'selector': 'app-closed-issues'},{'name': 'CreatedByMeComponent', 'selector': 'app-created-by-me'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'IssueComponent', 'selector': 'app-issue'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NewIssueComponent', 'selector': 'app-new-issue'},{'name': 'OptionsComponent', 'selector': 'app-options'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NewIssueComponent.html":{"url":"components/NewIssueComponent.html","title":"component - NewIssueComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NewIssueComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/new-issue/new-issue.component.ts\n\n\n    \n        Description\n    \n    \n        The place for creating new issues\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-new-issue\n            \n\n            \n                styleUrls\n                ./new-issue.component.css\n            \n\n\n\n            \n                templateUrl\n                ./new-issue.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                categories\n                            \n                            \n                                error\n                            \n                            \n                                issueForm\n                            \n                            \n                                loading\n                            \n                            \n                                priorities\n                            \n                            \n                                submitted\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCategories\n                            \n                            \n                                getPriorities\n                            \n                            \n                                getUsers\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                OnSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    f\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(formBuilder: FormBuilder, userService: UserService, authService: AuthService, issueService: IssueService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/new-issue/new-issue.component.ts:56\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issueService\n                                                  \n                                                        \n                                                                        IssueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategories\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/app/new-issue/new-issue.component.ts:100\n                \n            \n\n\n            \n                \n                    Retrieves the categories using the IssueService and sets the default value in the categories dropdown\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPriorities\n                        \n                        \n                    \n                \n            \n            \n                \ngetPriorities()\n                \n            \n\n\n            \n                \n                    Defined in src/app/new-issue/new-issue.component.ts:90\n                \n            \n\n\n            \n                \n                    Retrieves the priorities using the IssueService and sets the default value in the priorities dropdown\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/app/new-issue/new-issue.component.ts:110\n                \n            \n\n\n            \n                \n                    Retrieves the users using the IssueService and sets the default value in the users dropdown\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/new-issue/new-issue.component.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            OnSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nOnSubmit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/new-issue/new-issue.component.ts:121\n                \n            \n\n\n            \n                \n                    Executed when the Save button is clicked. Validates the form and starts the saving process using the IssueService.\nIf the process was successful it navigates the user to the issue detail page\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            categories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-issue/new-issue.component.ts:31\n                            \n                        \n\n                \n                    \n                        The categories the new issue can pick up\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-issue/new-issue.component.ts:56\n                            \n                        \n\n                \n                    \n                        The error messages coming from the IssueService are stored here\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            issueForm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FormGroup\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-issue/new-issue.component.ts:41\n                            \n                        \n\n                \n                    \n                        The Reactive Form object\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            loading\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-issue/new-issue.component.ts:51\n                            \n                        \n\n                \n                    \n                        Is true if the Save button was clicked and the saving process started running\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            priorities\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Priority[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-issue/new-issue.component.ts:36\n                            \n                        \n\n                \n                    \n                        The priorities the new issue can be assigned to\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            submitted\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-issue/new-issue.component.ts:46\n                            \n                        \n\n                \n                    \n                        Is true if the Save button was clicked, helps displaying client-side validation errors on the input fields\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/new-issue/new-issue.component.ts:26\n                            \n                        \n\n                \n                    \n                        The users that the new issue can be assigned to\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        f\n                    \n                \n\n                \n                    \n                        getf()\n                    \n                \n                            \n                                \n                                    Defined in src/app/new-issue/new-issue.component.ts:82\n                                \n                            \n                    \n                        \n                                Gets all the controls from the form\n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { User } from '../models/user.type';\nimport { Status } from '../models/status.type';\nimport { Observable } from 'rxjs';\nimport { Category } from '../models/category.type';\nimport { Priority } from '../models/priority.type';\nimport { UserService } from '../services/user.service';\nimport { AuthService } from '../services/auth.service';\nimport { IssueService } from '../services/issue.service';\nimport { Issue } from '../models/issue.type';\nimport { Router } from '@angular/router';\n\n/**\n * The place for creating new issues\n */\n@Component({\n  selector: 'app-new-issue',\n  templateUrl: './new-issue.component.html',\n  styleUrls: ['./new-issue.component.css']\n})\nexport class NewIssueComponent implements OnInit {\n  /**\n   * The users that the new issue can be assigned to\n   */\n  users: User[];\n\n  /**\n   * The categories the new issue can pick up\n   */\n  categories: Category[];\n\n  /**\n   * The priorities the new issue can be assigned to\n   */\n  priorities: Priority[];\n\n  /**\n   * The Reactive Form object\n   */\n  issueForm: FormGroup;\n  \n  /**\n   * Is true if the Save button was clicked, helps displaying client-side validation errors on the input fields\n   */\n  submitted = false;\n\n  /**\n   * Is true if the Save button was clicked and the saving process started running\n   */\n  loading = false;\n\n  /**\n   * The error messages coming from the {@link IssueService} are stored here\n   */\n  error = \"\";\n\n  constructor(private formBuilder: FormBuilder,\n    private userService: UserService,\n    private authService: AuthService,\n    private issueService: IssueService,\n    private router: Router) { }\n\n  ngOnInit() {\n    this.getUsers();\n    this.getCategories();\n    this.getPriorities();\n\n    this.issueForm = this.formBuilder.group({\n      title: [\"\", Validators.required],\n      description: [\"\", Validators.required],\n      assignedto: [\"\", Validators.required],\n      category: [\"\", Validators.required],\n      priority: [\"\", Validators.required],\n      duedate: [\"\", Validators.required]\n    });\n  }\n\n  /**\n   * Gets all the controls from the form\n   */\n  get f() {\n    return this.issueForm.controls;\n  }\n\n\n  /**\n   * Retrieves the priorities using the {@link IssueService} and sets the default value in the priorities dropdown\n   */\n  getPriorities() {\n    this.issueService.getIssuePriorities().subscribe(p => {\n      this.priorities = p;\n      this.f.priority.setValue(this.priorities[0]);\n    });\n  }\n\n  /**\n   * Retrieves the categories using the {@link IssueService} and sets the default value in the categories dropdown\n   */\n  getCategories() {\n    this.issueService.getIssueCategories().subscribe(c => {\n      this.categories = c;\n      this.f.category.setValue(this.categories[0]);\n    });\n  }\n\n  /**\n   * Retrieves the users using the {@link IssueService} and sets the default value in the users dropdown\n   */\n  getUsers() {\n    this.userService.getAll().subscribe(u => {\n      this.users = u;\n      this.f.assignedto.setValue(this.users[0]);\n    });\n  }\n\n  /**\n   * Executed when the Save button is clicked. Validates the form and starts the saving process using the {@link IssueService}.\n   * If the process was successful it navigates the user to the issue detail page\n   */\n  OnSubmit() {\n    this.submitted = true;\n\n    if (this.issueForm.invalid) {\n      return;\n    }\n\n    this.submitted = false;\n    this.error = \"\";\n    this.loading = true;\n\n    let newIssue: any = {\n      title: this.f.title.value,\n      description: this.f.description.value,\n      assignedToId: this.f.assignedto.value.id,\n      createdById: this.authService.currentUserValue.id,\n      categoryId: this.f.category.value.id,\n      priorityId: this.f.priority.value.id,\n      dueOn: new Date(this.f.duedate.value)\n    };\n\n    this.issueService.addOrUpdateIssue(newIssue).subscribe(data => {\n      this.router.navigate([\"/issue/\" + data.id]);\n    }, error => {\n      this.error = error.error.message;\n      this.loading = false;\n    });\n  }\n}\n\n    \n\n    \n        \n  Create New Issue\n  \n    \n      \n        Title\n        \n        \n          Title is required\n        \n      \n\n      \n        Description\n        \n        \n          Description is required\n        \n      \n\n      \n        Assigned To\n        \n          {{user.username}} ({{user.firstName}} {{user.lastName}})\n          \n        \n        \n          User is required\n        \n      \n\n      \n        Category\n        \n          {{category.name}}\n        \n        \n          Category is required\n        \n      \n\n      \n        Priority\n        \n          {{priority.name}}\n        \n        \n          Priority is required\n        \n      \n\n      \n        Due Date\n        \n        \n          Due date is required\n        \n      \n\n      \n        Save\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./new-issue.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Create New Issue                    Title                          Title is required                            Description                          Description is required                            Assigned To                  {{user.username}} ({{user.firstName}} {{user.lastName}})                                    User is required                            Category                  {{category.name}}                          Category is required                            Priority                  {{priority.name}}                          Priority is required                            Due Date                          Due date is required                            Save                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AssignedToMeComponent', 'selector': 'app-assigned-to-me'},{'name': 'ClosedIssuesComponent', 'selector': 'app-closed-issues'},{'name': 'CreatedByMeComponent', 'selector': 'app-created-by-me'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'IssueComponent', 'selector': 'app-issue'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NewIssueComponent', 'selector': 'app-new-issue'},{'name': 'OptionsComponent', 'selector': 'app-options'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NewIssueComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Note.html":{"url":"interfaces/Note.html","title":"interface - Note","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Note\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/note.type.ts\n        \n\n            \n                Description\n            \n            \n                The Note interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        createdOn\n                                \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                        issueId\n                                \n                                \n                                        statusId\n                                \n                                \n                                        text\n                                \n                                \n                                        userId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdOn\n                                    \n                                \n                                \n                                    \n                                        createdOn:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        issueId\n                                    \n                                \n                                \n                                    \n                                        issueId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusId\n                                    \n                                \n                                \n                                    \n                                        statusId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Note {\n    id?: number,\n    createdOn?: Date,\n    issueId: number,\n    userId: number,\n    statusId: number,\n    text: string\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OptionsComponent.html":{"url":"components/OptionsComponent.html","title":"component - OptionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  OptionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/options/options.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-options\n            \n\n            \n                styleUrls\n                ./options.component.css\n            \n\n\n\n            \n                templateUrl\n                ./options.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/options/options.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/options/options.component.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-options',\n  templateUrl: './options.component.html',\n  styleUrls: ['./options.component.css']\n})\nexport class OptionsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      Category Settings\n      Workflow Settings\n    \n  \n\n\n\n  \n    \n      Add New Category\n      \n        \n          \n            \n              \n            \n            \n              Save\n            \n          \n        \n      \n    \n  \n\n\n\n  \n    \n      Add New Status\n      \n        \n          \n            \n              \n            \n            \n              Save\n            \n          \n        \n      \n    \n  \n\n\n\n  \n    \n      Add New Priority Level\n      \n        \n          \n            \n              \n            \n            \n              \n                Priority 1\n                Priority 2\n                Priority 3\n              \n            \n            \n              Save\n            \n          \n        \n      \n    \n  \n\n\n\n  \n    \n      Change User Permission\n      \n        \n          \n            \n              \n            \n            \n              \n                User Level 1\n                User Level 2\n                User Level 3\n              \n            \n            \n              Save\n            \n          \n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./options.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Category Settings      Workflow Settings                  Add New Category                                                                                        Save                                                      Add New Status                                                                                        Save                                                      Add New Priority Level                                                                                                        Priority 1                Priority 2                Priority 3                                                    Save                                                      Change User Permission                                                                                                        User Level 1                User Level 2                User Level 3                                                    Save                                          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AssignedToMeComponent', 'selector': 'app-assigned-to-me'},{'name': 'ClosedIssuesComponent', 'selector': 'app-closed-issues'},{'name': 'CreatedByMeComponent', 'selector': 'app-created-by-me'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'IssueComponent', 'selector': 'app-issue'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NewIssueComponent', 'selector': 'app-new-issue'},{'name': 'OptionsComponent', 'selector': 'app-options'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OptionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Priority.html":{"url":"interfaces/Priority.html","title":"interface - Priority","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Priority\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/priority.type.ts\n        \n\n            \n                Description\n            \n            \n                The Priority interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        delay\n                                \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        delay\n                                    \n                                \n                                \n                                    \n                                        delay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    It is a pre-defined value for assuring the order of priorities\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Priority {\n    id: number,\n    name: string,\n    /**\n     * It is a pre-defined value for assuring the order of priorities\n     *\n     * @type {number}\n     */\n    delay: number\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Status.html":{"url":"interfaces/Status.html","title":"interface - Status","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Status\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/status.type.ts\n        \n\n            \n                Description\n            \n            \n                The Status interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Status {\n    id: number,\n    name: string\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/user.type.ts\n        \n\n            \n                Description\n            \n            \n                The User interfcae\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        firstName\n                                \n                                \n                                        id\n                                \n                                \n                                        lastName\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                            Optional\n                                        token\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The JWT token used to authorize users\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface User {\n    id: number,\n    username: string,\n    password?: string,\n    firstName: string,\n    lastName: string,\n    \n    /**\n     * The JWT token used to authorize users\n     *\n     */\n    token?: string\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/user.service.ts\n        \n\n            \n                Description\n            \n            \n                A servie for communicating between the API and the User objects\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n            \n                \n                    Defined in src/app/services/user.service.ts:19\n                \n            \n\n\n            \n                \n                    Returns all the users stored in the database\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from \"../../environments/environment\";\nimport { Observable } from 'rxjs';\nimport { User } from '../models/user.type';\n\n/**\n * A servie for communicating between the API and the {@link User} objects\n */\n@Injectable({\n    providedIn: \"root\"\n})\nexport class UserService {\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Returns all the users stored in the database\n     */\n    getAll(): Observable {\n        return this.http.get(environment.apiUrl_REAL + \"/api/users\");\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/app/dashboard/assigned-to-me/assigned-to-me.component.ts\n            \n            component\n            AssignedToMeComponent\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/dashboard/closed-issues/closed-issues.component.ts\n            \n            component\n            ClosedIssuesComponent\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/dashboard/created-by-me/created-by-me.component.ts\n            \n            component\n            CreatedByMeComponent\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/app/dashboard/dashboard.component.ts\n            \n            component\n            DashboardComponent\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/helpers/error.interceptor.ts\n            \n            interceptor\n            ErrorInterceptor\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/helpers/error.interceptor.ts\n            \n            variable\n            errorInterceptorProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/helpers/fake-backend.ts\n            \n            interceptor\n            FakeBackendInterceptor\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/helpers/fake-backend.ts\n            \n            variable\n            fakeBackendProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/helpers/fake-db.ts\n            \n            variable\n            FakeDb\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/helpers/fake-db.ts\n            \n            variable\n            Notes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/helpers/jwt.interceptor.ts\n            \n            interceptor\n            JwtInterceptor\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/helpers/jwt.interceptor.ts\n            \n            variable\n            jwtInterceptorProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/issue/issue.component.ts\n            \n            component\n            IssueComponent\n            \n                88 %\n                (22/25)\n            \n        \n        \n            \n                \n                src/app/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/app/models/category.type.ts\n            \n            interface\n            Category\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/models/issue.type.ts\n            \n            interface\n            Issue\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/app/models/note.type.ts\n            \n            interface\n            Note\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/models/priority.type.ts\n            \n            interface\n            Priority\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/models/status.type.ts\n            \n            interface\n            Status\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/models/user.type.ts\n            \n            interface\n            User\n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                src/app/new-issue/new-issue.component.ts\n            \n            component\n            NewIssueComponent\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                src/app/options/options.component.ts\n            \n            component\n            OptionsComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/services/issue.service.ts\n            \n            injectable\n            IssueService\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/app/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~7.2.0\n        \n            @angular/common : ~7.2.0\n        \n            @angular/compiler : ~7.2.0\n        \n            @angular/core : ~7.2.0\n        \n            @angular/forms : ~7.2.0\n        \n            @angular/platform-browser : ~7.2.0\n        \n            @angular/platform-browser-dynamic : ~7.2.0\n        \n            @angular/router : ~7.2.0\n        \n            bootstrap : ^4.3.1\n        \n            core-js : ^2.5.4\n        \n            lodash : ^4.17.11\n        \n            ngx-bootstrap : ^4.1.1\n        \n            rxjs : ~6.3.3\n        \n            tslib : ^1.9.0\n        \n            zone.js : ~0.8.26\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nIssueTracker\nThis project was generated with Angular CLI version 7.3.8.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAssignedToMeComponent\n\nAssignedToMeComponent\n\nAppModule -->\n\nAssignedToMeComponent->AppModule\n\n\n\n\n\nClosedIssuesComponent\n\nClosedIssuesComponent\n\nAppModule -->\n\nClosedIssuesComponent->AppModule\n\n\n\n\n\nCreatedByMeComponent\n\nCreatedByMeComponent\n\nAppModule -->\n\nCreatedByMeComponent->AppModule\n\n\n\n\n\nDashboardComponent\n\nDashboardComponent\n\nAppModule -->\n\nDashboardComponent->AppModule\n\n\n\n\n\nIssueComponent\n\nIssueComponent\n\nAppModule -->\n\nIssueComponent->AppModule\n\n\n\n\n\nLoginComponent\n\nLoginComponent\n\nAppModule -->\n\nLoginComponent->AppModule\n\n\n\n\n\nNewIssueComponent\n\nNewIssueComponent\n\nAppModule -->\n\nNewIssueComponent->AppModule\n\n\n\n\n\nOptionsComponent\n\nOptionsComponent\n\nAppModule -->\n\nOptionsComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            errorInterceptorProvider   (src/.../error.interceptor.ts)\n                        \n                        \n                            fakeBackendProvider   (src/.../fake-backend.ts)\n                        \n                        \n                            FakeDb   (src/.../fake-db.ts)\n                        \n                        \n                            jwtInterceptorProvider   (src/.../jwt.interceptor.ts)\n                        \n                        \n                            Notes   (src/.../fake-db.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true,\n  apiUrl: \"https://csabav.github.io/issue_tracker/\",\n  apiUrl_REAL: \"https://temalabor-issue-tracker.azurewebsites.net/\"\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false,\n  apiUrl: \"http://localhost:4200/\",\n  apiUrl_REAL: \"https://localhost:5001\"\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/helpers/error.interceptor.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            errorInterceptorProvider\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    provide: HTTP_INTERCEPTORS,\n    useClass: ErrorInterceptor,\n    multi: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/helpers/fake-backend.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fakeBackendProvider\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    // use fake backend in place of Http service for backend-less development\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/app/helpers/fake-db.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FakeDb\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    // Users: Users,\n    // Issues: Issues,\n    // Statuses: Statuses,\n    // Categories: Categories,\n    // Priorities: Priorities,\n    Notes: Notes\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Notes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Note[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    {id: 1, createdOn: new Date(\"2019-05-01 19:38\"), issueId: 2, userId: 1, statusId: 100, text: \"Created this ticket for you, please hit it first thing in the morning.\"},\n    {id: 2, createdOn: new Date(\"2019-05-02 09:22\"), issueId: 2, userId: 2, statusId: 101, text: \"Starting to work on this now. Will keep you updated.\"}\n]\n                        \n                    \n\n\n            \n        \n\n    src/app/helpers/jwt.interceptor.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtInterceptorProvider\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    provide: HTTP_INTERCEPTORS,\n    useClass: JwtInterceptor,\n    multi: true\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
